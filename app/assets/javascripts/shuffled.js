var ShuffledApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x000000);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampleBackground = new PIXI.Sprite(this.sampleTextures[0]);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleLogo = new PIXI.Sprite(this.sampleTextures[1]);
    this.sampleLogo.anchor.x = 0.5;
    this.sampleLogo.anchor.y = 0.5;
    this.sampleLogo.position.x = this.screenWidth / 2;
    this.sampleLogo.position.y = this.screenHeight / 2;
    this.sampleLogo.scale.x = 0.2;
    this.sampleLogo.scale.y = 0.2;
    this.stage.addChild(this.sampleLogo);
    this.sampleText = new PIXI.Text('counting: 0', {
      font: 'bold italic 60px Arvo',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 8
    });
    this.stage.addChild(this.sampleText);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stage = this.stage;
    window.stats = this.stats;
    this.count = 0;
    requestAnimationFrame(this.animate);
  }

  ShuffledApp.prototype.animate = function() {
    this.stats.begin();
    this.renderer.render(this.stage);
    this.stats.end();
    this.count += 0.1;
    this.sampleText.setText('counting: ' + (this.count | 0));
    requestAnimationFrame(this.animate);
  };

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;

//# sourceMappingURL=data:application/json;base64,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LENBQUEsQ0FBQSxDQUFBO0FBQUEsSUFDQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLENBREEsQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQUEsQ0FGQSxDQUFBO0FBQUEsSUFJQSxJQUFDLENBQUEsS0FBRCxJQUFVLEdBSlYsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxPQUFaLENBQW9CLFlBQUEsR0FBZSxDQUFDLElBQUMsQ0FBQSxLQUFELEdBQVMsQ0FBVixDQUFuQyxDQUxBLENBQUE7QUFBQSxJQU9BLHFCQUFBLENBQXNCLElBQUMsQ0FBQSxPQUF2QixDQVBBLENBREs7RUFBQSxDQW5EVCxDQUFBOztBQUFBLHdCQThEQSxNQUFBLEdBQVEsU0FBQSxHQUFBO1dBQ0osS0FESTtFQUFBLENBOURSLENBQUE7O3FCQUFBOztJQURKLENBQUE7O0FBQUEsTUFrRU0sQ0FBQyxPQUFQLEdBQWlCLFdBbEVqQixDQUFBIiwiZmlsZSI6InNodWZmbGVkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG4jI1N5c3RlbVRleHQgPSByZXF1aXJlICdzeXN0ZW10ZXh0J1xuXG4jIFNodWZmbGVkQXBwXG4jIFRoZSBtYWluIGVudHJ5IHBvaW50IG9mIHRoZSBhcHBcbmNsYXNzIFNodWZmbGVkQXBwXG4gICAgY29uc3RydWN0b3I6IChAc2NyZWVuV2lkdGgsIEBzY3JlZW5IZWlnaHQpIC0+XG4gICAgICAgIEByZW5kZXJlciA9IFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyIEBzY3JlZW5XaWR0aCwgQHNjcmVlbkhlaWdodFxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIEByZW5kZXJlci52aWV3XG5cbiAgICAgICAgQHN0YXRzID0gbmV3IFN0YXRzXG4gICAgICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgICAgICBAc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzBweCdcbiAgICAgICAgQHN0YXRzLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzBweCdcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAc3RhdHMuZG9tRWxlbWVudFxuXG4gICAgICAgIEBzdGFnZSA9IG5ldyBQSVhJLlN0YWdlIDB4MDAwMDAwXG5cbiAgICAgICAgQHNhbXBsZVRleHR1cmVzID0gW1xuICAgICAgICAgICAgUElYSS5UZXh0dXJlLmZyb21JbWFnZSAnL2Fzc2V0cy9pbWFnZXMvbG9zdF9raWRzX2NvbnRlc3QuanBnJ1xuICAgICAgICAgICAgUElYSS5UZXh0dXJlLmZyb21JbWFnZSAnL2Fzc2V0cy9pbWFnZXMvcHVyc3VpdC5wbmcnXG4gICAgICAgIF1cblxuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZCA9IG5ldyBQSVhJLlNwcml0ZSBAc2FtcGxlVGV4dHVyZXNbMF1cbiAgICAgICAgQHNhbXBsZUJhY2tncm91bmQuYW5jaG9yLnggPSAwLjVcbiAgICAgICAgQHNhbXBsZUJhY2tncm91bmQuYW5jaG9yLnkgPSAwLjVcbiAgICAgICAgQHNhbXBsZUJhY2tncm91bmQucG9zaXRpb24ueCA9IEBzY3JlZW5XaWR0aCAvIDJcbiAgICAgICAgQHNhbXBsZUJhY2tncm91bmQucG9zaXRpb24ueSA9IEBzY3JlZW5IZWlnaHQgLyAyXG4gICAgICAgIEBzdGFnZS5hZGRDaGlsZCBAc2FtcGxlQmFja2dyb3VuZFxuXG4gICAgICAgIEBzYW1wbGVMb2dvID0gbmV3IFBJWEkuU3ByaXRlIEBzYW1wbGVUZXh0dXJlc1sxXVxuICAgICAgICBAc2FtcGxlTG9nby5hbmNob3IueCA9IDAuNVxuICAgICAgICBAc2FtcGxlTG9nby5hbmNob3IueSA9IDAuNVxuICAgICAgICBAc2FtcGxlTG9nby5wb3NpdGlvbi54ID0gQHNjcmVlbldpZHRoIC8gMlxuICAgICAgICBAc2FtcGxlTG9nby5wb3NpdGlvbi55ID0gQHNjcmVlbkhlaWdodCAvIDJcbiAgICAgICAgQHNhbXBsZUxvZ28uc2NhbGUueCA9IDAuMlxuICAgICAgICBAc2FtcGxlTG9nby5zY2FsZS55ID0gMC4yXG4gICAgICAgIEBzdGFnZS5hZGRDaGlsZCBAc2FtcGxlTG9nb1xuXG4gICAgICAgIEBzYW1wbGVUZXh0ID0gbmV3IFBJWEkuVGV4dCAnY291bnRpbmc6IDAnLFxuICAgICAgICAgICAgZm9udDogJ2JvbGQgaXRhbGljIDYwcHggQXJ2bydcbiAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgICAgZmlsbDogJyMzZTE3MDcnXG4gICAgICAgICAgICBzdHJva2U6ICcjYTQ0MTBlJ1xuICAgICAgICAgICAgc3Ryb2tlVGhpY2tuZXNzOiA4XG4gICAgICAgIEBzdGFnZS5hZGRDaGlsZCBAc2FtcGxlVGV4dFxuXG4gICAgICAgIHdpbmRvdy5yZW5kZXJlciA9IEByZW5kZXJlclxuICAgICAgICB3aW5kb3cuYW5pbWF0ZSA9IEBhbmltYXRlXG4gICAgICAgIHdpbmRvdy5zdGFnZSA9IEBzdGFnZVxuICAgICAgICB3aW5kb3cuc3RhdHMgPSBAc3RhdHNcblxuICAgICAgICBAY291bnQgPSAwXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG5cbiAgICAjIGFuaW1hdGUgY2FsbGJhY2tcbiAgICBhbmltYXRlOiA9PlxuICAgICAgICBAc3RhdHMuYmVnaW4oKVxuICAgICAgICBAcmVuZGVyZXIucmVuZGVyIEBzdGFnZVxuICAgICAgICBAc3RhdHMuZW5kKClcblxuICAgICAgICBAY291bnQgKz0gMC4xXG4gICAgICAgIEBzYW1wbGVUZXh0LnNldFRleHQgJ2NvdW50aW5nOiAnICsgKEBjb3VudCB8IDApXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG4gICAgICAgIHJldHVyblxuXG4gICAgc2tldGNoOiAtPlxuICAgICAgICB0cnVlXG5cbm1vZHVsZS5leHBvcnRzID0gU2h1ZmZsZWRBcHBcblxuIl19
var ShuffledApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x000000);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampler = PIXI.Texture.fromImage('http://localhost:5000/assets/images/lost_kids_contest.jpg');
    this.sampleBackground = new PIXI.Sprite(this.sampler);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleText = new PIXI.Text('counting', {
      font: '60px Arvo',
      fill: 'white',
      align: 'left'
    });
    this.stage.addChild(this.sampleText);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stage = this.stage;
    window.stats = this.stats;
    requestAnimationFrame(this.animate);
  }

  ShuffledApp.prototype.animate = function() {
    this.stats.begin();
    this.renderer.render(this.stage);
    this.stats.end();
    requestAnimationFrame(this.animate);
  };

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;

//# sourceMappingURL=data:application/json;base64,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QUMsT0FBUCxHQUFpQixJQUFDLENBQUEsT0F4Q2xCLENBQUE7QUFBQSxJQXlDQSxNQUFNLENBQUMsS0FBUCxHQUFlLElBQUMsQ0FBQSxLQXpDaEIsQ0FBQTtBQUFBLElBMENBLE1BQU0sQ0FBQyxLQUFQLEdBQWUsSUFBQyxDQUFBLEtBMUNoQixDQUFBO0FBQUEsSUE0Q0EscUJBQUEsQ0FBc0IsSUFBQyxDQUFBLE9BQXZCLENBNUNBLENBRFM7RUFBQSxDQUFiOztBQUFBLHdCQWdEQSxPQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ0wsSUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBQSxDQUFBLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFpQixJQUFDLENBQUEsS0FBbEIsQ0FEQSxDQUFBO0FBQUEsSUFFQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBQSxDQUZBLENBQUE7QUFBQSxJQUlBLHFCQUFBLENBQXNCLElBQUMsQ0FBQSxPQUF2QixDQUpBLENBREs7RUFBQSxDQWhEVCxDQUFBOztBQUFBLHdCQXdEQSxNQUFBLEdBQVEsU0FBQSxHQUFBO1dBQ0osS0FESTtFQUFBLENBeERSLENBQUE7O3FCQUFBOztJQURKLENBQUE7O0FBQUEsTUE0RE0sQ0FBQyxPQUFQLEdBQWlCLFdBNURqQixDQUFBIiwiZmlsZSI6InNodWZmbGVkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG4jI1N5c3RlbVRleHQgPSByZXF1aXJlICcuL2VudGl0aWVzL3N5c3RlbXRleHQnXG5cbiMgU2h1ZmZsZWRBcHBcbiMgVGhlIG1haW4gZW50cnkgcG9pbnQgb2YgdGhlIGFwcFxuY2xhc3MgU2h1ZmZsZWRBcHBcbiAgICBjb25zdHJ1Y3RvcjogKEBzY3JlZW5XaWR0aCwgQHNjcmVlbkhlaWdodCkgLT5cbiAgICAgICAgQHJlbmRlcmVyID0gUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIgQHNjcmVlbldpZHRoLCBAc2NyZWVuSGVpZ2h0XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgQHJlbmRlcmVyLnZpZXdcblxuICAgICAgICBAc3RhdHMgPSBuZXcgU3RhdHNcbiAgICAgICAgQHN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSAnMHB4J1xuICAgICAgICBAc3RhdHMuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4J1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIEBzdGF0cy5kb21FbGVtZW50XG5cbiAgICAgICAgQHN0YWdlID0gbmV3IFBJWEkuU3RhZ2UgMHgwMDAwMDBcblxuICAgICAgICBAc2FtcGxlVGV4dHVyZXMgPSBbXG4gICAgICAgICAgICBQSVhJLlRleHR1cmUuZnJvbUltYWdlICcvYXNzZXRzL2ltYWdlcy9sb3N0X2tpZHNfY29udGVzdC5qcGcnXG4gICAgICAgICAgICBQSVhJLlRleHR1cmUuZnJvbUltYWdlICcvYXNzZXRzL2ltYWdlcy9wdXJzdWl0LnBuZydcbiAgICAgICAgXVxuXG4gICAgICAgIEBzYW1wbGVyID0gUElYSS5UZXh0dXJlLmZyb21JbWFnZSAnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2Fzc2V0cy9pbWFnZXMvbG9zdF9raWRzX2NvbnRlc3QuanBnJ1xuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZCA9IG5ldyBQSVhJLlNwcml0ZSBAc2FtcGxlclxuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZC5hbmNob3IueCA9IDAuNVxuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZC5hbmNob3IueSA9IDAuNVxuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZC5wb3NpdGlvbi54ID0gQHNjcmVlbldpZHRoIC8gMlxuICAgICAgICBAc2FtcGxlQmFja2dyb3VuZC5wb3NpdGlvbi55ID0gQHNjcmVlbkhlaWdodCAvIDJcbiAgICAgICAgQHN0YWdlLmFkZENoaWxkIEBzYW1wbGVCYWNrZ3JvdW5kXG5cbiAgICAgICAgIyNAc2FtcGxlTG9nbyA9IG5ldyBQSVhJLlNwcml0ZSBAc2FtcGxlVGV4dHVyZXNbMV1cbiAgICAgICAgIyNAc2FtcGxlTG9nby5hbmNob3IueCA9IDAuNVxuICAgICAgICAjI0BzYW1wbGVMb2dvLmFuY2hvci55ID0gMC41XG4gICAgICAgICMjQHNhbXBsZUxvZ28ucG9zaXRpb24ueCA9IEBzY3JlZW5XaWR0aCAvIDJcbiAgICAgICAgIyNAc2FtcGxlTG9nby5wb3NpdGlvbi55ID0gQHNjcmVlbkhlaWdodCAvIDJcbiAgICAgICAgIyNAc2FtcGxlTG9nby5zY2FsZS54ID0gMC4yXG4gICAgICAgICMjQHNhbXBsZUxvZ28uc2NhbGUueSA9IDAuMlxuICAgICAgICAjI0BzdGFnZS5hZGRDaGlsZCBAc2FtcGxlTG9nb1xuXG4gICAgICAgIEBzYW1wbGVUZXh0ID0gbmV3IFBJWEkuVGV4dCAnY291bnRpbmcnLFxuICAgICAgICAgICAgZm9udDogJzYwcHggQXJ2bydcbiAgICAgICAgICAgIGZpbGw6ICd3aGl0ZSdcbiAgICAgICAgICAgIGFsaWduOiAnbGVmdCdcbiAgICAgICAgQHN0YWdlLmFkZENoaWxkIEBzYW1wbGVUZXh0XG5cbiAgICAgICAgd2luZG93LnJlbmRlcmVyID0gQHJlbmRlcmVyXG4gICAgICAgIHdpbmRvdy5hbmltYXRlID0gQGFuaW1hdGVcbiAgICAgICAgd2luZG93LnN0YWdlID0gQHN0YWdlXG4gICAgICAgIHdpbmRvdy5zdGF0cyA9IEBzdGF0c1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0ZVxuXG4gICAgIyBhbmltYXRlIGNhbGxiYWNrXG4gICAgYW5pbWF0ZTogPT5cbiAgICAgICAgQHN0YXRzLmJlZ2luKClcbiAgICAgICAgQHJlbmRlcmVyLnJlbmRlciBAc3RhZ2VcbiAgICAgICAgQHN0YXRzLmVuZCgpXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG4gICAgICAgIHJldHVyblxuXG4gICAgc2tldGNoOiAtPlxuICAgICAgICB0cnVlXG5cbm1vZHVsZS5leHBvcnRzID0gU2h1ZmZsZWRBcHBcblxuIl19
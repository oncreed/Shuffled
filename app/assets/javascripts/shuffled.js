var ShuffledApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x000000);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampler = PIXI.Texture.fromImage('http://localhost:5000/assets/images/lost_kids_contest.jpg');
    this.sampleBackground = new PIXI.Sprite(this.sampler);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleLogo = new PIXI.Sprite(this.sampleTextures[1]);
    this.sampleLogo.anchor.x = 0.5;
    this.sampleLogo.anchor.y = 0.5;
    this.sampleLogo.position.x = this.screenWidth / 2;
    this.sampleLogo.position.y = this.screenHeight / 2;
    this.sampleLogo.scale.x = 0.2;
    this.sampleLogo.scale.y = 0.2;
    this.stage.addChild(this.sampleLogo);
    this.sampleText = new PIXI.Text('counting: 0', {
      font: 'bold italic 60px Arvo',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 8
    });
    this.stage.addChild(this.sampleText);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stage = this.stage;
    window.stats = this.stats;
    this.count = 0;
    requestAnimationFrame(this.animate);
  }

  ShuffledApp.prototype.animate = function() {
    this.stats.begin();
    this.renderer.render(this.stage);
    this.stats.end();
    this.count += 0.1;
    this.sampleText.setText('counting: ' + (this.count | 0));
    requestAnimationFrame(this.animate);
  };

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;

//# sourceMappingURL=data:application/json;base64,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QUEsd0JBb0RBLE9BQUEsR0FBUyxTQUFBLEdBQUE7QUFDTCxJQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxDQUFBLENBQUEsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLENBQWlCLElBQUMsQ0FBQSxLQUFsQixDQURBLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFBLENBRkEsQ0FBQTtBQUFBLElBSUEsSUFBQyxDQUFBLEtBQUQsSUFBVSxHQUpWLENBQUE7QUFBQSxJQUtBLElBQUMsQ0FBQSxVQUFVLENBQUMsT0FBWixDQUFvQixZQUFBLEdBQWUsQ0FBQyxJQUFDLENBQUEsS0FBRCxHQUFTLENBQVYsQ0FBbkMsQ0FMQSxDQUFBO0FBQUEsSUFPQSxxQkFBQSxDQUFzQixJQUFDLENBQUEsT0FBdkIsQ0FQQSxDQURLO0VBQUEsQ0FwRFQsQ0FBQTs7QUFBQSx3QkErREEsTUFBQSxHQUFRLFNBQUEsR0FBQTtXQUNKLEtBREk7RUFBQSxDQS9EUixDQUFBOztxQkFBQTs7SUFESixDQUFBOztBQUFBLE1BbUVNLENBQUMsT0FBUCxHQUFpQixXQW5FakIsQ0FBQSIsImZpbGUiOiJzaHVmZmxlZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxuIyNTeXN0ZW1UZXh0ID0gcmVxdWlyZSAnc3lzdGVtdGV4dCdcblxuIyBTaHVmZmxlZEFwcFxuIyBUaGUgbWFpbiBlbnRyeSBwb2ludCBvZiB0aGUgYXBwXG5jbGFzcyBTaHVmZmxlZEFwcFxuICAgIGNvbnN0cnVjdG9yOiAoQHNjcmVlbldpZHRoLCBAc2NyZWVuSGVpZ2h0KSAtPlxuICAgICAgICBAcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlciBAc2NyZWVuV2lkdGgsIEBzY3JlZW5IZWlnaHRcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAcmVuZGVyZXIudmlld1xuXG4gICAgICAgIEBzdGF0cyA9IG5ldyBTdGF0c1xuICAgICAgICBAc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcbiAgICAgICAgQHN0YXRzLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICcwcHgnXG4gICAgICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgQHN0YXRzLmRvbUVsZW1lbnRcblxuICAgICAgICBAc3RhZ2UgPSBuZXcgUElYSS5TdGFnZSAweDAwMDAwMFxuXG4gICAgICAgIEBzYW1wbGVUZXh0dXJlcyA9IFtcbiAgICAgICAgICAgIFBJWEkuVGV4dHVyZS5mcm9tSW1hZ2UgJy9hc3NldHMvaW1hZ2VzL2xvc3Rfa2lkc19jb250ZXN0LmpwZydcbiAgICAgICAgICAgIFBJWEkuVGV4dHVyZS5mcm9tSW1hZ2UgJy9hc3NldHMvaW1hZ2VzL3B1cnN1aXQucG5nJ1xuICAgICAgICBdXG5cbiAgICAgICAgQHNhbXBsZXIgPSBQSVhJLlRleHR1cmUuZnJvbUltYWdlICdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXNzZXRzL2ltYWdlcy9sb3N0X2tpZHNfY29udGVzdC5qcGcnXG4gICAgICAgIEBzYW1wbGVCYWNrZ3JvdW5kID0gbmV3IFBJWEkuU3ByaXRlIEBzYW1wbGVyXG4gICAgICAgIEBzYW1wbGVCYWNrZ3JvdW5kLmFuY2hvci54ID0gMC41XG4gICAgICAgIEBzYW1wbGVCYWNrZ3JvdW5kLmFuY2hvci55ID0gMC41XG4gICAgICAgIEBzYW1wbGVCYWNrZ3JvdW5kLnBvc2l0aW9uLnggPSBAc2NyZWVuV2lkdGggLyAyXG4gICAgICAgIEBzYW1wbGVCYWNrZ3JvdW5kLnBvc2l0aW9uLnkgPSBAc2NyZWVuSGVpZ2h0IC8gMlxuICAgICAgICBAc3RhZ2UuYWRkQ2hpbGQgQHNhbXBsZUJhY2tncm91bmRcblxuICAgICAgICBAc2FtcGxlTG9nbyA9IG5ldyBQSVhJLlNwcml0ZSBAc2FtcGxlVGV4dHVyZXNbMV1cbiAgICAgICAgQHNhbXBsZUxvZ28uYW5jaG9yLnggPSAwLjVcbiAgICAgICAgQHNhbXBsZUxvZ28uYW5jaG9yLnkgPSAwLjVcbiAgICAgICAgQHNhbXBsZUxvZ28ucG9zaXRpb24ueCA9IEBzY3JlZW5XaWR0aCAvIDJcbiAgICAgICAgQHNhbXBsZUxvZ28ucG9zaXRpb24ueSA9IEBzY3JlZW5IZWlnaHQgLyAyXG4gICAgICAgIEBzYW1wbGVMb2dvLnNjYWxlLnggPSAwLjJcbiAgICAgICAgQHNhbXBsZUxvZ28uc2NhbGUueSA9IDAuMlxuICAgICAgICBAc3RhZ2UuYWRkQ2hpbGQgQHNhbXBsZUxvZ29cblxuICAgICAgICBAc2FtcGxlVGV4dCA9IG5ldyBQSVhJLlRleHQgJ2NvdW50aW5nOiAwJyxcbiAgICAgICAgICAgIGZvbnQ6ICdib2xkIGl0YWxpYyA2MHB4IEFydm8nXG4gICAgICAgICAgICBhbGlnbjogJ2NlbnRlcidcbiAgICAgICAgICAgIGZpbGw6ICcjM2UxNzA3J1xuICAgICAgICAgICAgc3Ryb2tlOiAnI2E0NDEwZSdcbiAgICAgICAgICAgIHN0cm9rZVRoaWNrbmVzczogOFxuICAgICAgICBAc3RhZ2UuYWRkQ2hpbGQgQHNhbXBsZVRleHRcblxuICAgICAgICB3aW5kb3cucmVuZGVyZXIgPSBAcmVuZGVyZXJcbiAgICAgICAgd2luZG93LmFuaW1hdGUgPSBAYW5pbWF0ZVxuICAgICAgICB3aW5kb3cuc3RhZ2UgPSBAc3RhZ2VcbiAgICAgICAgd2luZG93LnN0YXRzID0gQHN0YXRzXG5cbiAgICAgICAgQGNvdW50ID0gMFxuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0ZVxuXG4gICAgIyBhbmltYXRlIGNhbGxiYWNrXG4gICAgYW5pbWF0ZTogPT5cbiAgICAgICAgQHN0YXRzLmJlZ2luKClcbiAgICAgICAgQHJlbmRlcmVyLnJlbmRlciBAc3RhZ2VcbiAgICAgICAgQHN0YXRzLmVuZCgpXG5cbiAgICAgICAgQGNvdW50ICs9IDAuMVxuICAgICAgICBAc2FtcGxlVGV4dC5zZXRUZXh0ICdjb3VudGluZzogJyArIChAY291bnQgfCAwKVxuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0ZVxuICAgICAgICByZXR1cm5cblxuICAgIHNrZXRjaDogLT5cbiAgICAgICAgdHJ1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNodWZmbGVkQXBwXG5cbiJdfQ==
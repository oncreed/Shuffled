var Configs, GameScene, Scene, Sketch, SystemText,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Configs = require('Configs');

Scene = require('Scene');

Sketch = require('Sketch');

SystemText = require('SystemText');

GameScene = (function(_super) {
  __extends(GameScene, _super);

  function GameScene() {
    var blur, i, xpos, ypos;
    GameScene.__super__.constructor.apply(this, arguments);
    blur = new PIXI.BlurFilter;
    this.symbols = [];
    this.texture = PIXI.Texture.fromImage('/assets/images/canyon_of_ages.jpg');
    this.background = new Sketch(this.texture);
    this.background.anchor.x = 0.5;
    this.background.anchor.y = 0.5;
    this.background.position.x = Configs.desktop.settings.width / 2;
    this.background.position.y = Configs.desktop.settings.height / 2 + 60;
    this.background.scale.x = 0.8;
    this.background.scale.y = 1.2;
    this.background.filters = null;
    this.background.addToScene(this);
    xpos = [60, 104, 148, 192, 236];
    ypos = [60, 104, 148, 192, 236];
    i = 0;
    while (i < 16) {
      this.symbols[i] = new SystemText('A', {
        font: 'bold 42px Anton',
        align: 'center',
        fill: '#3e1707',
        stroke: '#a4410e',
        strokeThickness: 5
      });
      this.symbols[i].anchor.x = 0.5;
      this.symbols[i].anchor.y = 0.5;
      this.symbols[i].position.x = xpos[i];
      this.symbols[i].position.y = ypos[i];
      this.symbols[i].addToScene(this);
      i++;
    }
  }

  GameScene.prototype.update = function(deltaTime) {
    var $;
    $ = this;
    GameScene.__super__.update.call(this, deltaTime);
  };

  return GameScene;

})(Scene);

module.exports = GameScene;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjZW5lcy9nYW1lc2NlbmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsNkNBQUE7RUFBQTtpU0FBQTs7QUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVIsQ0FBVixDQUFBOztBQUFBLEtBRUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQUZSLENBQUE7O0FBQUEsTUFHQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBSFQsQ0FBQTs7QUFBQSxVQUlBLEdBQWEsT0FBQSxDQUFRLFlBQVIsQ0FKYixDQUFBOztBQUFBO0FBT0ksOEJBQUEsQ0FBQTs7QUFBYSxFQUFBLG1CQUFBLEdBQUE7QUFDVCxRQUFBLG1CQUFBO0FBQUEsSUFBQSw0Q0FBQSxTQUFBLENBQUEsQ0FBQTtBQUFBLElBQ0EsSUFBQSxHQUFPLEdBQUEsQ0FBQSxJQUFRLENBQUMsVUFEaEIsQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLE9BQUQsR0FBVyxFQUhYLENBQUE7QUFBQSxJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFiLENBQXVCLG1DQUF2QixDQUxYLENBQUE7QUFBQSxJQU1BLElBQUMsQ0FBQSxVQUFELEdBQWtCLElBQUEsTUFBQSxDQUFPLElBQUMsQ0FBQSxPQUFSLENBTmxCLENBQUE7QUFBQSxJQU9BLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQW5CLEdBQXVCLEdBUHZCLENBQUE7QUFBQSxJQVFBLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQW5CLEdBQXVCLEdBUnZCLENBQUE7QUFBQSxJQVNBLElBQUMsQ0FBQSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQXJCLEdBQXlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQXpCLEdBQWlDLENBVDFELENBQUE7QUFBQSxJQVVBLElBQUMsQ0FBQSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQXJCLEdBQXlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQXpCLEdBQWtDLENBQWxDLEdBQXNDLEVBVi9ELENBQUE7QUFBQSxJQVdBLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQWxCLEdBQXNCLEdBWHRCLENBQUE7QUFBQSxJQVlBLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQWxCLEdBQXNCLEdBWnRCLENBQUE7QUFBQSxJQWFBLElBQUMsQ0FBQSxVQUFVLENBQUMsT0FBWixHQUFzQixJQWJ0QixDQUFBO0FBQUEsSUFjQSxJQUFDLENBQUEsVUFBVSxDQUFDLFVBQVosQ0FBdUIsSUFBdkIsQ0FkQSxDQUFBO0FBQUEsSUFnQkEsSUFBQSxHQUFPLENBQ0gsRUFERyxFQUVILEdBRkcsRUFHSCxHQUhHLEVBSUgsR0FKRyxFQUtILEdBTEcsQ0FoQlAsQ0FBQTtBQUFBLElBd0JBLElBQUEsR0FBTyxDQUNILEVBREcsRUFFSCxHQUZHLEVBR0gsR0FIRyxFQUlILEdBSkcsRUFLSCxHQUxHLENBeEJQLENBQUE7QUFBQSxJQWdDQSxDQUFBLEdBQUksQ0FoQ0osQ0FBQTtBQWlDQSxXQUFNLENBQUEsR0FBSSxFQUFWLEdBQUE7QUFDSSxNQUFBLElBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxDQUFULEdBQWtCLElBQUEsVUFBQSxDQUFXLEdBQVgsRUFDZDtBQUFBLFFBQUEsSUFBQSxFQUFNLGlCQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sUUFEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFNBRk47QUFBQSxRQUdBLE1BQUEsRUFBUSxTQUhSO0FBQUEsUUFJQSxlQUFBLEVBQWlCLENBSmpCO09BRGMsQ0FBbEIsQ0FBQTtBQUFBLE1BTUEsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBbkIsR0FBdUIsR0FOdkIsQ0FBQTtBQUFBLE1BT0EsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBbkIsR0FBdUIsR0FQdkIsQ0FBQTtBQUFBLE1BUUEsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBckIsR0FBeUIsSUFBSyxDQUFBLENBQUEsQ0FSOUIsQ0FBQTtBQUFBLE1BU0EsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBckIsR0FBeUIsSUFBSyxDQUFBLENBQUEsQ0FUOUIsQ0FBQTtBQUFBLE1BVUEsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxVQUFaLENBQXVCLElBQXZCLENBVkEsQ0FBQTtBQUFBLE1BV0EsQ0FBQSxFQVhBLENBREo7SUFBQSxDQWxDUztFQUFBLENBQWI7O0FBQUEsc0JBZ0RBLE1BQUEsR0FBUSxTQUFDLFNBQUQsR0FBQTtBQUNKLFFBQUEsQ0FBQTtBQUFBLElBQUEsQ0FBQSxHQUFJLElBQUosQ0FBQTtBQUFBLElBRUEsc0NBQU0sU0FBTixDQUZBLENBREk7RUFBQSxDQWhEUixDQUFBOzttQkFBQTs7R0FEb0IsTUFOeEIsQ0FBQTs7QUFBQSxNQTZETSxDQUFDLE9BQVAsR0FBaUIsU0E3RGpCLENBQUEiLCJmaWxlIjoic2NlbmVzL2dhbWVzY2VuZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkNvbmZpZ3MgPSByZXF1aXJlICdDb25maWdzJ1xuXG5TY2VuZSA9IHJlcXVpcmUgJ1NjZW5lJ1xuU2tldGNoID0gcmVxdWlyZSAnU2tldGNoJ1xuU3lzdGVtVGV4dCA9IHJlcXVpcmUgJ1N5c3RlbVRleHQnXG5cbmNsYXNzIEdhbWVTY2VuZSBleHRlbmRzIFNjZW5lXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIGJsdXIgPSBuZXcgUElYSS5CbHVyRmlsdGVyXG5cbiAgICAgICAgQHN5bWJvbHMgPSBbXVxuXG4gICAgICAgIEB0ZXh0dXJlID0gUElYSS5UZXh0dXJlLmZyb21JbWFnZSAnL2Fzc2V0cy9pbWFnZXMvY2FueW9uX29mX2FnZXMuanBnJ1xuICAgICAgICBAYmFja2dyb3VuZCA9IG5ldyBTa2V0Y2ggQHRleHR1cmVcbiAgICAgICAgQGJhY2tncm91bmQuYW5jaG9yLnggPSAwLjVcbiAgICAgICAgQGJhY2tncm91bmQuYW5jaG9yLnkgPSAwLjVcbiAgICAgICAgQGJhY2tncm91bmQucG9zaXRpb24ueCA9IENvbmZpZ3MuZGVza3RvcC5zZXR0aW5ncy53aWR0aCAvIDJcbiAgICAgICAgQGJhY2tncm91bmQucG9zaXRpb24ueSA9IENvbmZpZ3MuZGVza3RvcC5zZXR0aW5ncy5oZWlnaHQgLyAyICsgNjBcbiAgICAgICAgQGJhY2tncm91bmQuc2NhbGUueCA9IDAuOFxuICAgICAgICBAYmFja2dyb3VuZC5zY2FsZS55ID0gMS4yXG4gICAgICAgIEBiYWNrZ3JvdW5kLmZpbHRlcnMgPSBudWxsXG4gICAgICAgIEBiYWNrZ3JvdW5kLmFkZFRvU2NlbmUgQFxuXG4gICAgICAgIHhwb3MgPSBbXG4gICAgICAgICAgICA2MFxuICAgICAgICAgICAgMTA0XG4gICAgICAgICAgICAxNDhcbiAgICAgICAgICAgIDE5MlxuICAgICAgICAgICAgMjM2XG4gICAgICAgIF1cblxuICAgICAgICB5cG9zID0gW1xuICAgICAgICAgICAgNjBcbiAgICAgICAgICAgIDEwNFxuICAgICAgICAgICAgMTQ4XG4gICAgICAgICAgICAxOTJcbiAgICAgICAgICAgIDIzNlxuICAgICAgICBdXG5cbiAgICAgICAgaSA9IDBcbiAgICAgICAgd2hpbGUgaSA8IDE2XG4gICAgICAgICAgICBAc3ltYm9sc1tpXSA9IG5ldyBTeXN0ZW1UZXh0ICdBJyxcbiAgICAgICAgICAgICAgICBmb250OiAnYm9sZCA0MnB4IEFudG9uJ1xuICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgICAgICAgIGZpbGw6ICcjM2UxNzA3J1xuICAgICAgICAgICAgICAgIHN0cm9rZTogJyNhNDQxMGUnXG4gICAgICAgICAgICAgICAgc3Ryb2tlVGhpY2tuZXNzOiA1XG4gICAgICAgICAgICBAc3ltYm9sc1tpXS5hbmNob3IueCA9IDAuNVxuICAgICAgICAgICAgQHN5bWJvbHNbaV0uYW5jaG9yLnkgPSAwLjVcbiAgICAgICAgICAgIEBzeW1ib2xzW2ldLnBvc2l0aW9uLnggPSB4cG9zW2ldXG4gICAgICAgICAgICBAc3ltYm9sc1tpXS5wb3NpdGlvbi55ID0geXBvc1tpXVxuICAgICAgICAgICAgQHN5bWJvbHNbaV0uYWRkVG9TY2VuZSBAXG4gICAgICAgICAgICBpKytcblxuICAgIHVwZGF0ZTogKGRlbHRhVGltZSkgLT5cbiAgICAgICAgJCA9IEBcblxuICAgICAgICBzdXBlciBkZWx0YVRpbWVcbiAgICAgICAgcmV0dXJuXG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZVNjZW5lXG4iXX0=
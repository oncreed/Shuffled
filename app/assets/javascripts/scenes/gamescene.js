var Button, Configs, GameScene, Scene, Sketch, SystemText,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Configs = require('Configs');

Scene = require('Scene');

Sketch = require('Sketch');

Button = require('Button');

SystemText = require('SystemText');

GameScene = (function(_super) {
  __extends(GameScene, _super);

  function GameScene() {
    GameScene.__super__.constructor.apply(this, arguments);
    this.init();
  }

  GameScene.prototype.init = function() {
    var blur, i, index, j, n, xpos, ypos;
    blur = new PIXI.BlurFilter;
    this.symbols = [];
    this.textures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/earth_circle.png')];
    this.background = new Sketch(this.textures[0]);
    this.background.anchor.x = 0.5;
    this.background.anchor.y = 0.5;
    this.background.position.x = Configs.desktop.settings.width / 2;
    this.background.position.y = Configs.desktop.settings.height / 2;
    this.background.filters = [blur];
    this.background.addToScene(this);
    xpos = [80, 160, 240, 320, 400, 480];
    ypos = [80, 160, 240, 320, 400, 480];
    this.chars = 'ABCDEF'.split('');
    i = 0;
    while (i < 6) {
      j = 0;
      while (j < 6) {
        index = i + j;
        n = this.getRandomInt(0, 5);
        this.symbols[index] = new SystemText(this.chars[n], {
          font: 'bold 72px Anton',
          align: 'center',
          fill: '#3e1707',
          stroke: '#a4410e',
          strokeThickness: 5
        });
        this.symbols[index].anchor.x = 0.5;
        this.symbols[index].anchor.y = 0.5;
        this.symbols[index].position.x = xpos[j];
        this.symbols[index].position.y = ypos[i];
        this.symbols[index].addToScene(this);
        j++;
      }
      i++;
    }
    this.buttons = {};
    this.buttons['shuffle'] = new SystemText('shuffle!', {
      font: 'bold 42px Anton',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 5
    });
    this.buttons['shuffle'].anchor.x = 0.5;
    this.buttons['shuffle'].anchor.y = 0.5;
    this.buttons['shuffle'].position.x = Configs.desktop.settings.width / 2 + 260;
    this.buttons['shuffle'].position.y = 90;
    this.buttons['shuffle'].addToScene(this);
    this.buttons['info'] = new SystemText('info', {
      font: 'bold 42px Anton',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 5
    });
    this.buttons['info'].anchor.x = 0.5;
    this.buttons['info'].anchor.y = 0.5;
    this.buttons['info'].position.x = Configs.desktop.settings.width / 2 + 260;
    this.buttons['info'].position.y = 140;
    this.buttons['info'].addToScene(this);
    this.buttons['find'] = new SystemText('eureka', {
      font: 'bold 42px Anton',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 5
    });
    this.buttons['find'].anchor.x = 0.5;
    this.buttons['find'].anchor.y = 0.5;
    this.buttons['find'].position.x = Configs.desktop.settings.width / 2 + 260;
    this.buttons['find'].position.y = 340;
    this.buttons['find'].addToScene(this);
  };

  GameScene.prototype.update = function(deltaTime) {
    var $;
    $ = this;
    this.buttons['shuffle'].interactive = true;
    this.buttons['shuffle'].mouseover = function(data) {
      $.buttons['shuffle'].scale.x = 1.1;
      $.buttons['shuffle'].scale.y = 1.1;
    };
    this.buttons['shuffle'].mouseout = function(data) {
      $.buttons['shuffle'].scale.x = 1.0;
      $.buttons['shuffle'].scale.y = 1.0;
    };
    this.buttons['shuffle'].mousedown = function(data) {
      var i, index, j, n;
      $.buttons['shuffle'].scale.x = 0.8;
      $.buttons['shuffle'].scale.y = 0.8;
      i = 0;
      while (i < 6) {
        j = 0;
        while (j < 6) {
          index = i + j;
          n = $.getRandomInt(0, $.chars.length);
          $.symbols[index].setText($.chars[n]);
          j++;
        }
        i++;
      }
    };
    GameScene.__super__.update.call(this, deltaTime);
  };

  GameScene.prototype.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  return GameScene;

})(Scene);

module.exports = GameScene;

//# sourceMappingURL=data:application/json;base64,
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



},{}],"background":[function(require,module,exports){
var Background, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Background = (function(_super) {
  __extends(Background, _super);

  function Background(texture) {
    this.renderPriority = globals.priority.background;
    Background.__super__.constructor.call(this, texture);
  }

  Background.prototype.setRenderPriority = function(layer) {
    return this.renderPriority = layer;
  };

  Background.prototype.getRenderPriority = function() {
    return this.renderPriority;
  };

  Background.prototype.addToStage = function(stage) {
    stage.addChild(this);
  };

  return Background;

})(PIXI.Sprite);

module.exports = Background;


},{"sh-globals":undefined}],"beerpoweredengine":[function(require,module,exports){
var BeerPoweredEngine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BeerPoweredEngine = (function() {
  function BeerPoweredEngine(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.init();
  }

  BeerPoweredEngine.prototype.init = function() {
    var canvas, context, drawLine;
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x00ff00);
    canvas = document.createElement('canvas');
    canvas.width = this.screenWidth;
    canvas.height = this.screenHeight;
    context = canvas.getContext('2d');
    drawLine = function(fX, fY, tX, tY, width, color) {
      context.beginPath();
      context.moveTo(fX, fY);
      context.lineTo(tX, tY);
      context.lineWidth = width;
      context.strokeStyle = color;
      return context.stroke();
    };
    drawLine(57, 0, 57, 450, 114, '#808080');
    drawLine(171, 0, 171, 450, 114, '#ffff00');
    drawLine(285, 0, 285, 450, 114, '#00ffff');
    drawLine(399, 0, 399, 450, 114, '#00ff00');
    drawLine(513, 0, 513, 450, 114, '#ff00ff');
    drawLine(627, 0, 627, 450, 114, '#ff0000');
    drawLine(741, 0, 741, 450, 114, '#0000ff');
    drawLine(100, 450, 100, 500, 200, '#0000ff');
    drawLine(300, 450, 300, 500, 200, '#ff00ff');
    drawLine(500, 450, 500, 500, 200, '#00ffff');
    drawLine(700, 450, 700, 500, 200, '#ffffff');
    drawLine(200, 500, 200, 600, 400, '#ffffff');
    drawLine(600, 500, 600, 600, 400, '#000000');
    this.sprite = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas));
    this.stage.addChild(this.sprite);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stats = this.stats;
    window.stage = this.stage;
    this.poller = null;
    requestAnimationFrame(this.animate);
  };

  BeerPoweredEngine.prototype.setStage = function(stage) {
    this.stage = stage;
    window.stage = this.stage;
  };

  BeerPoweredEngine.prototype.setPoller = function(poller) {
    this.poller = poller;
  };

  BeerPoweredEngine.prototype.animate = function(deltaTime) {
    var _ref;
    this.stats.begin();
    if (this.stage != null) {
      this.renderer.render(this.stage);
    }
    if ((_ref = this.poller) != null) {
      _ref.call();
    }
    this.stats.end();
    requestAnimationFrame(this.animate);
    TWEEN.update(deltaTime);
  };

  return BeerPoweredEngine;

})();

module.exports = BeerPoweredEngine;


},{}],"button":[function(require,module,exports){
var Button, ButtonActiveState, ButtonMode, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

ButtonActiveState = {
  inactive: 0,
  active: 1
};

ButtonMode = {
  focus: 1,
  click: 0,
  hover: 5
};

Button = (function(_super) {
  __extends(Button, _super);

  function Button(textureOn, textureOff, texturePress) {
    this.textureOn = textureOn;
    this.textureOff = textureOff;
    this.texturePress = texturePress;
    Button.__super__.constructor.call(this, this.textureOn);
    this.isPress = false;
    this.mode = ButtonMode.focus;
  }

  Button.prototype.update = function(deltaTime) {
    if (this.isPres) {
      if (this.mode === ButtonMode.click) {
        this.setTexture(this.texturePress);
      }
    }
  };

  Button.prototype.press = function() {
    this.isPress = true;
  };

  Button.prototype.getBoundingBox = function() {
    return this.getBounds;
  };

  Button.prototype.setRenderPriority = function() {};

  Button.prototype.getRenderPriority = function() {};

  return Button;

})(PIXI.Sprite);

module.exports = Button;


},{"sh-globals":undefined}],"loader":[function(require,module,exports){
var Background, Loader, ProgressBar, Sketch, SystemText, globals;

globals = require('sh-globals');

Background = require('background');

Sketch = require('sketch');

ProgressBar = require('progressbar');

SystemText = require('systemtext');

Loader = (function() {
  function Loader(screenWidth, screenHeight, stage) {
    var $, tween;
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.stage = stage;
    $ = this;
    this.tasksDone = false;
    this.tasksCount = 0;
    this.tasksCompleted = 0;
    this.tradeOff = false;
    this.textures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit_blue.png'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.myFilter = new PIXI.RGBSplitFilter;
    this.background = new Background(this.textures[0]);
    this.background.anchor.x = 0.5;
    this.background.anchor.y = 0.5;
    this.background.position.x = this.screenWidth / 2;
    this.background.position.y = this.screenHeight / 2;
    this.background.addToStage(this.stage);
    this.logoNoFill = new Sketch(this.textures[1]);
    this.logoNoFill.anchor.x = 0.5;
    this.logoNoFill.anchor.y = 0.5;
    this.logoNoFill.position.x = this.screenWidth / 2;
    this.logoNoFill.position.y = this.screenHeight / 2;
    this.logoNoFill.scale.x = 0.2;
    this.logoNoFill.scale.y = 0.2;
    this.logoNoFill.addToStage(this.stage);
    this.logo = new Sketch(this.textures[2]);
    this.logo.anchor.x = 0.5;
    this.logo.anchor.y = 0.5;
    this.logo.position.x = this.screenWidth / 2;
    this.logo.position.y = this.screenHeight / 2;
    this.logo.scale.x = 0.2;
    this.logo.scale.y = 0.2;
    this.logo.alpha = 0.0;
    this.logo.addToStage(this.stage);
    this.startButton = new SystemText('Play', {
      font: 'bold 42px Anton',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 5
    });
    this.startButton.anchor.x = 0.5;
    this.startButton.anchor.y = 0.5;
    this.startButton.position.x = this.screenWidth / 2;
    this.startButton.position.y = this.screenWidth / 2 + 90;
    this.startButton.alpha = 0.0;
    this.startButton.interactive = true;
    this.startButton.mouseover = function(data) {};
    this.startButton.mouseout = function(data) {};
    this.startButton.mousedown = function(data) {
      $.startButton.scale.x = 0.8;
      $.startButton.scale.y = 0.8;
      $.tradeOff = true;
    };
    this.startButton.mouseup = function(data) {
      $.startButton.scale.x = 1.0;
      $.startButton.scale.y = 1.0;
    };
    this.startButton.click = function(data) {
      $.background.filters = [$.myFilter];
    };
    this.startButton.touchstart = function(data) {};
    this.startButton.touchend = function(data) {};
    this.startButton.tap = function(data) {};
    this.startButton.addToStage(this.stage);
    this.loadSound = new Howl({
      urls: ['/assets/sounds/flo_rida.mp3'],
      autoplay: false,
      loop: true,
      onload: function() {
        return console.log('finished loading sound');
      }
    });
    tween = new TWEEN.Tween({
      alpha: 0.0
    }).to({
      alpha: 1.0
    }, 9000).easing(TWEEN.Easing.Elastic.InOut).onUpdate(function() {
      $.logo.alpha = this.alpha;
    }).onComplete(function() {
      return $.startButton.alpha = 1.0;
    }).start();
  }

  Loader.prototype.taskToLoad = function(count) {
    return this.tasksCount = count;
  };

  Loader.prototype.addToFinishedTask = function() {
    if (!this.tasksCount === this.tasksCompleted) {
      return this.tasksCompleted += 1;
    } else {
      return this.tasksDone = true;
    }
  };

  Loader.prototype.update = function(deltaTime) {};

  return Loader;

})();

module.exports = Loader;


},{"background":undefined,"progressbar":undefined,"sh-globals":undefined,"sketch":undefined,"systemtext":undefined}],"progressbar":[function(require,module,exports){
var ProgressBar, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

ProgressBar = (function(_super) {
  __extends(ProgressBar, _super);

  function ProgressBar(textureBlank, textureFull) {
    ProgressBar.__super__.constructor.call(this, textureBlank);
  }

  ProgressBar.prototype.update = function(deltaTime) {};

  ProgressBar.prototype.settings = function(opts) {};

  return ProgressBar;

})(PIXI.Sprite);

module.exports = ProgressBar;


},{"sh-globals":undefined}],"scene":[function(require,module,exports){
var Scene,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Scene = (function(_super) {
  __extends(Scene, _super);

  function Scene() {
    this.paused = false;
    return;
  }

  Scene.prototype.update = function(deltaTime) {};

  Scene.prototype.pause = function() {
    this.paused = true;
  };

  Scene.prototype.resume = function() {
    this.paused = false;
  };

  Scene.prototype.isPaused = function() {
    return this.paused;
  };

  return Scene;

})(PIXI.Stage);


},{}],"sh-configs":[function(require,module,exports){
module.exports = {
  desktop: {
    settings: {
      width: 800,
      height: 600
    },
    loader: {
      background: '',
      logo: '',
      fill: ''
    }
  },
  phones: {
    android: {
      settings: {
        width: 480,
        height: 320
      },
      loader: {
        background: '',
        logo: '',
        fill: ''
      }
    },
    ios: {
      settings: {
        width: 480,
        height: 320
      },
      loader: {
        background: '',
        logo: '',
        fill: ''
      }
    },
    windows: {
      settings: {
        width: 800,
        height: 600
      },
      loader: {
        background: '',
        logo: '',
        fill: ''
      }
    }
  },
  tablets: {
    android: {
      settings: {
        width: 1024,
        height: 768
      },
      loader: {
        background: '',
        logo: '',
        fill: ''
      }
    },
    ios: {
      settings: {
        width: 480,
        height: 320
      },
      loader: {
        background: '',
        logo: '',
        fill: ''
      }
    }
  }
};


},{}],"sh-globals":[function(require,module,exports){
module.exports = {
  gameModes: {
    onLoad: 2,
    onLobby: 4,
    onGame: 6,
    onPause: 8,
    onOptions: 10,
    onEnd: 12
  },
  priority: {
    background: 10,
    normal: 50,
    overlay: 60,
    banner: 75,
    above: 100,
    max: 999
  }
};


},{}],"shuffled":[function(require,module,exports){
var Background, BeerPoweredEngine, Loader, ShuffledApp, Sketch,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BeerPoweredEngine = require('beerpoweredengine');

Background = require('background');

Sketch = require('sketch');

Loader = require('loader');

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.update = __bind(this.update, this);
    this.engine = new BeerPoweredEngine(this.screenWidth, this.screenHeight);
    this.stage = new PIXI.Stage(0x000000);
    this.engine.setStage(this.stage);
    this.engine.setPoller(this.update);
    this.loader = new Loader(this.screenWidth, this.screenHeight, this.stage);
  }

  ShuffledApp.prototype.update = function(deltaTime) {
    this.loader.update(deltaTime);
  };

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;


},{"background":undefined,"beerpoweredengine":undefined,"loader":undefined,"sketch":undefined}],"sketch":[function(require,module,exports){
var Sketch, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Sketch = (function(_super) {
  __extends(Sketch, _super);

  function Sketch(texture) {
    this.renderPriority = globals.priority.normal;
    Sketch.__super__.constructor.call(this, texture);
  }

  Sketch.prototype.setRenderPriority = function(layer) {
    return this.renderPriority = layer;
  };

  Sketch.prototype.getRenderPriority = function() {
    return this.renderPriority;
  };

  Sketch.prototype.addToStage = function(stage) {
    stage.addChild(this);
  };

  return Sketch;

})(PIXI.Sprite);

module.exports = Sketch;


},{"sh-globals":undefined}],"systemtext":[function(require,module,exports){
var SystemText, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

SystemText = (function(_super) {
  __extends(SystemText, _super);

  function SystemText(msg, style) {
    SystemText.__super__.constructor.call(this, msg, style);
  }

  SystemText.prototype.addToStage = function(stage) {
    stage.addChild(this);
  };

  return SystemText;

})(PIXI.Text);

module.exports = SystemText;


},{"sh-globals":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;base64,

require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



},{}],"background":[function(require,module,exports){
var Background, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Background = (function(_super) {
  __extends(Background, _super);

  function Background() {
    this.renderPriority = globals.priority.background;
  }

  Background.prototype.setRenderPriority = function(layer) {
    return this.renderPriority = layer;
  };

  Background.prototype.getRenderPriority = function() {
    return this.renderPriority;
  };

  Background.prototype.addToStage = function(stage) {
    stage.addChild(this);
  };

  return Background;

})(PIXI.Sprite);

module.exports = Background;


},{"sh-globals":undefined}],"button":[function(require,module,exports){
var Button, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Button = (function(_super) {
  __extends(Button, _super);

  function Button() {
    this.width = 0;
    this.height = 0;
  }

  Button.prototype.update = function(deltaTime) {};

  Button.prototype.press = function() {};

  Button.prototype.getBoundingBox = function() {};

  Button.prototype.setRenderPriority = function() {};

  Button.prototype.getRenderPriority = function() {};

  return Button;

})(PIXI.Sprite);

module.exports = Button;


},{"sh-globals":undefined}],"draftengine":[function(require,module,exports){
var DraftEngine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DraftEngine = (function() {
  function DraftEngine(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.init();
  }

  DraftEngine.prototype.init = function() {
    var canvas, context, drawLine;
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x00ff00);
    canvas = document.createElement('canvas');
    canvas.width = this.screenWidth;
    canvas.height = this.screenHeight;
    context = canvas.getContext('2d');
    drawLine = function(fX, fY, tX, tY, width, color) {
      context.beginPath();
      context.moveTo(fX, fY);
      context.lineTo(tX, tY);
      context.lineWidth = width;
      context.strokeStyle = color;
      return context.stroke();
    };
    drawLine(57, 0, 57, 450, 114, '#808080');
    drawLine(171, 0, 171, 450, 114, '#ffff00');
    drawLine(285, 0, 285, 450, 114, '#00ffff');
    drawLine(399, 0, 399, 450, 114, '#00ff00');
    drawLine(513, 0, 513, 450, 114, '#ff00ff');
    drawLine(627, 0, 627, 450, 114, '#ff0000');
    drawLine(741, 0, 741, 450, 114, '#0000ff');
    drawLine(100, 450, 100, 500, 200, '#0000ff');
    drawLine(300, 450, 300, 500, 200, '#ff00ff');
    drawLine(500, 450, 500, 500, 200, '#00ffff');
    drawLine(700, 450, 700, 500, 200, '#ffffff');
    drawLine(200, 500, 200, 600, 400, '#ffffff');
    drawLine(600, 500, 600, 600, 400, '#000000');
    this.sprite = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas));
    this.stage.addChild(this.sprite);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stats = this.stats;
    window.stage = this.stage;
    requestAnimationFrame(this.animate);
  };

  DraftEngine.prototype.setStage = function(stage) {
    this.stage = stage;
    return window.stage = this.stage;
  };

  DraftEngine.prototype.animate = function() {
    this.stats.begin();
    if (this.stage != null) {
      this.renderer.render(this.stage);
    }
    this.stats.end();
    requestAnimationFrame(this.animate);
  };

  return DraftEngine;

})();

module.exports = DraftEngine;


},{}],"loader":[function(require,module,exports){
var Loader, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Loader = (function(_super) {
  __extends(Loader, _super);

  function Loader() {
    this.width = 0;
    this.height = 0;
  }

  Loader.prototype.update = function(deltaTime) {};

  return Loader;

})(PIXI.MovieClip);

module.exports = Loader;


},{"sh-globals":undefined}],"progressbar":[function(require,module,exports){
var ProgressBar, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

ProgressBar = (function(_super) {
  __extends(ProgressBar, _super);

  function ProgressBar() {
    this.width = 0;
    this.height = 0;
    this.status = 0;
  }

  ProgressBar.prototype.update = function(deltaTime) {};

  ProgressBar.prototype.settings = function(opts) {};

  return ProgressBar;

})(PIXI.Sprite);

module.exports = ProgressBar;


},{"sh-globals":undefined}],"sh-globals":[function(require,module,exports){
module.exports = {
  priority: {
    background: 10,
    normal: 50,
    overlay: 60,
    banner: 75,
    above: 100,
    max: 999
  }
};


},{}],"shuffled":[function(require,module,exports){
var DraftEngine, ShuffledApp, Sketch;

DraftEngine = require('draftengine');

Sketch = require('sketch');

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.engine = new DraftEngine(this.screenWidth, this.screenHeight);
    this.stage = new PIXI.Stage(0x000000);
    this.engine.setStage(this.stage);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampleBackground = new Sketch(this.sampleTextures[0]);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleLogo = new Sketch(this.sampleTextures[1]);
    this.sampleLogo.anchor.x = 0.5;
    this.sampleLogo.anchor.y = 0.5;
    this.sampleLogo.position.x = this.screenWidth / 2;
    this.sampleLogo.position.y = this.screenHeight / 2;
    this.sampleLogo.scale.x = 0.2;
    this.sampleLogo.scale.y = 0.2;
    this.stage.addChild(this.sampleLogo);
  }

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;


},{"draftengine":undefined,"sketch":undefined}],"sketch":[function(require,module,exports){
var Sketch, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

Sketch = (function(_super) {
  __extends(Sketch, _super);

  function Sketch(texture) {
    Sketch.__super__.constructor.call(this, texture);
    this.renderPriority = globals.priority.background;
  }

  Sketch.prototype.setRenderPriority = function(layer) {
    return this.renderPriority = layer;
  };

  Sketch.prototype.getRenderPriority = function() {
    return this.renderPriority;
  };

  return Sketch;

})(PIXI.Sprite);

module.exports = Sketch;


},{"sh-globals":undefined}],"systemtext":[function(require,module,exports){
var SystemText, globals,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

globals = require('sh-globals');

SystemText = (function(_super) {
  __extends(SystemText, _super);

  function SystemText(msg, style) {
    SystemText.__super__.constructor.call(this, msg, style);
    this.width = 0;
    this.height = 0;
    this.fontStyle = '24px sans-serif';
    this.fontAlign = 'center';
    this.strokeColor = '#a4410e';
    this.strokeThickness = 7;
  }

  return SystemText;

})(PIXI.Text);

module.exports = SystemText;


},{"sh-globals":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;base64,

require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



},{}],"shuffled":[function(require,module,exports){
var ShuffledApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x000000);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampler = PIXI.Texture.fromImage('http://localhost:5000/assets/images/lost_kids_contest.jpg');
    this.sampleBackground = new PIXI.Sprite(this.sampler);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleLogo = new PIXI.Sprite(this.sampleTextures[1]);
    this.sampleLogo.anchor.x = 0.5;
    this.sampleLogo.anchor.y = 0.5;
    this.sampleLogo.position.x = this.screenWidth / 2;
    this.sampleLogo.position.y = this.screenHeight / 2;
    this.sampleLogo.scale.x = 0.2;
    this.sampleLogo.scale.y = 0.2;
    this.stage.addChild(this.sampleLogo);
    this.sampleText = new PIXI.Text('counting: 0', {
      font: 'bold italic 60px Arvo',
      align: 'center',
      fill: '#3e1707',
      stroke: '#a4410e',
      strokeThickness: 8
    });
    this.stage.addChild(this.sampleText);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stage = this.stage;
    window.stats = this.stats;
    this.count = 0;
    requestAnimationFrame(this.animate);
  }

  ShuffledApp.prototype.animate = function() {
    this.stats.begin();
    this.renderer.render(this.stage);
    this.stats.end();
    this.count += 0.1;
    this.sampleText.setText('counting: ' + (this.count | 0));
    requestAnimationFrame(this.animate);
  };

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;


},{}],"systemtext":[function(require,module,exports){
var SystemText,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SystemText = (function(_super) {
  __extends(SystemText, _super);

  function SystemText(msg, style) {
    SystemText.__super__.constructor.call(this, msg, style);
    this.width = 0;
    this.height = 0;
    this.fontStyle = '24px sans-serif';
    this.fontAlign = 'center';
    this.strokeColor = '#a4410e';
    this.strokeThickness = 7;
  }

  return SystemText;

})(PIXI.Text);

module.exports = SystemText;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,

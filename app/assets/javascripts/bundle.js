require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



},{}],"draftengine":[function(require,module,exports){
var DraftEngine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DraftEngine = (function() {
  function DraftEngine(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.init();
  }

  DraftEngine.prototype.init = function() {
    var canvas, context, drawLine;
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x00ff00);
    canvas = document.createElement('canvas');
    canvas.width = this.screenWidth;
    canvas.height = this.screenHeight;
    context = canvas.getContext('2d');
    drawLine = function(fX, fY, tX, tY, width, color) {
      context.beginPath();
      context.moveTo(fX, fY);
      context.lineTo(tX, tY);
      context.lineWidth = width;
      context.strokeStyle = color;
      return context.stroke();
    };
    drawLine(57, 0, 57, 450, 114, '#808080');
    drawLine(171, 0, 171, 450, 114, '#ffff00');
    drawLine(285, 0, 285, 450, 114, '#00ffff');
    drawLine(399, 0, 399, 450, 114, '#00ff00');
    drawLine(513, 0, 513, 450, 114, '#ff00ff');
    drawLine(627, 0, 627, 450, 114, '#ff0000');
    drawLine(741, 0, 741, 450, 114, '#0000ff');
    drawLine(100, 450, 100, 500, 200, '#0000ff');
    drawLine(300, 450, 300, 500, 200, '#ff00ff');
    drawLine(500, 450, 500, 500, 200, '#00ffff');
    drawLine(700, 450, 700, 500, 200, '#ffffff');
    drawLine(200, 500, 200, 600, 400, '#ffffff');
    drawLine(600, 500, 600, 600, 400, '#000000');
    this.sprite = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas));
    this.stage.addChild(this.sprite);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stats = this.stats;
    window.stage = this.stage;
    requestAnimationFrame(this.animate);
  };

  DraftEngine.prototype.setStage = function(stage) {
    this.stage = stage;
    return window.stage = this.stage;
  };

  DraftEngine.prototype.animate = function() {
    this.stats.begin();
    if (this.stage != null) {
      this.renderer.render(this.stage);
    }
    this.stats.end();
    requestAnimationFrame(this.animate);
  };

  return DraftEngine;

})();

module.exports = DraftEngine;


},{}],"shuffled":[function(require,module,exports){
var DraftEngine, ShuffledApp;

DraftEngine = require('draftengine');

ShuffledApp = (function() {
  function ShuffledApp(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.engine = new DraftEngine(this.screenWidth, this.screenHeight);
    this.stage = new PIXI.Stage(0x000000);
    this.engine.setStage(this.stage);
    this.sampleTextures = [PIXI.Texture.fromImage('/assets/images/lost_kids_contest.jpg'), PIXI.Texture.fromImage('/assets/images/pursuit.png')];
    this.sampleBackground = new PIXI.Sprite(this.sampleTextures[0]);
    this.sampleBackground.anchor.x = 0.5;
    this.sampleBackground.anchor.y = 0.5;
    this.sampleBackground.position.x = this.screenWidth / 2;
    this.sampleBackground.position.y = this.screenHeight / 2;
    this.stage.addChild(this.sampleBackground);
    this.sampleLogo = new PIXI.Sprite(this.sampleTextures[1]);
    this.sampleLogo.anchor.x = 0.5;
    this.sampleLogo.anchor.y = 0.5;
    this.sampleLogo.position.x = this.screenWidth / 2;
    this.sampleLogo.position.y = this.screenHeight / 2;
    this.sampleLogo.scale.x = 0.2;
    this.sampleLogo.scale.y = 0.2;
    this.stage.addChild(this.sampleLogo);
  }

  ShuffledApp.prototype.sketch = function() {
    return true;
  };

  return ShuffledApp;

})();

module.exports = ShuffledApp;


},{"draftengine":undefined}],"systemtext":[function(require,module,exports){
var SystemText,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SystemText = (function(_super) {
  __extends(SystemText, _super);

  function SystemText(msg, style) {
    SystemText.__super__.constructor.call(this, msg, style);
    this.width = 0;
    this.height = 0;
    this.fontStyle = '24px sans-serif';
    this.fontAlign = 'center';
    this.strokeColor = '#a4410e';
    this.strokeThickness = 7;
  }

  return SystemText;

})(PIXI.Text);

module.exports = SystemText;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,

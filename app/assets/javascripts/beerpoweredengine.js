var BeerPoweredEngine, Scene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Scene = require('Scene');

BeerPoweredEngine = (function() {
  function BeerPoweredEngine(width, height) {
    this.width = width;
    this.height = height;
    this.animate = __bind(this.animate, this);
    this.scenes = {};
    this.scene = null;
    this.init();
    window.beer = this;
  }

  BeerPoweredEngine.prototype.init = function() {
    var $, texture;
    $ = this;
    this.renderer = PIXI.autoDetectRenderer(this.width, this.height);
    document.body.appendChild(this.renderer.view);
    this.renderer.onProtonUpdate = function() {};
    this.renderer.onParticleCreated = function(particle) {
      var particleSprite;
      particleSprite = new PIXI.Sprite(particle.target);
      particle.sprite = particleSprite;
      $.scene.addChild(particle.sprite);
    };
    this.renderer.onParticleUpdate = function(particle) {
      transformSprite(particle.sprite, particle);
    };
    this.renderer.onParticleDead = function(particle) {
      $.scene.removeChild(particle.sprite);
    };
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    texture = new PIXI.Texture.fromImage('/assets/images/bunny.png');
    this.proton = new Proton;
    this.emitter = new Proton.BehaviourEmitter;
    this.emitter.rate = new Proton.Rate(new Proton.Span(15, 13), new Proton.Span(.2, .5));
    this.emitter.addInitialize(new Proton.Mass(1));
    this.emitter.addInitialize(new Proton.ImageTarget(texture));
    this.emitter.addInitialize(new Proton.Life(2, 3));
    this.emitter.addInitialize(new Proton.Velocity(new Proton.Span(3, 9), new Proton.Span(0, 30, true), 'polar'));
    this.emitter.addBehaviour(new Proton.Gravity(8));
    this.emitter.addBehaviour(new Proton.Scale(new Proton.Span(1, 3), .3));
    this.emitter.addBehaviour(new Proton.Alpha(1, .5));
    this.emitter.addBehaviour(new Proton.Rotate(0, Proton.getSpan(-8, 9), 'add'));
    this.emitter.p.x = 1003 / 2;
    this.emitter.p.y = 100;
    this.emitter.emit();
    this.proton.addEmitter(this.emitter);
    this.emitter.addSelfBehaviour(new Proton.Gravity(5));
    this.emitter.addSelfBehaviour(new Proton.RandomDrift(30, 30, .1));
    this.emitter.addSelfBehaviour(new Proton.CrossZone(new Proton.RectZone(50, 0, 936, 610), 'bound'));
    requestAnimationFrame(this.animate);
  };

  BeerPoweredEngine.prototype.createScene = function(id, tscene, callback) {
    var scene;
    if (tscene == null) {
      tscene = Scene;
    }
    if (callback == null) {
      callback = function() {};
    }
    if (this.scenes[id]) {
      return undefined;
    }
    scene = new tscene;
    scene.init();
    scene.onUpdate(callback);
    this.scenes[id] = scene;
    return scene;
  };

  BeerPoweredEngine.prototype.goToScene = function(id) {
    var _ref;
    if (this.scenes[id] != null) {
      if ((_ref = this.scene) != null) {
        _ref.pause();
      }
      this.scene = this.scenes[id];
      this.scene.resume();
      return true;
    }
    return false;
  };

  BeerPoweredEngine.prototype.transformSprite = function(particleSprite, particle) {
    particleSprite.position.x = particle.p.x;
    particleSprite.position.y = particle.p.y;
    particleSprite.scale.x = particle.scale;
    particleSprite.scale.y = particle.scale;
    particleSprite.anchor.x = .5;
    particleSprite.anchor.y = .5;
    particleSprite.alpha = particle.alpha;
    return particleSprite.rotation = particle.rotation * Math.PI / 180;
  };

  BeerPoweredEngine.prototype.animate = function(deltaTime) {
    requestAnimationFrame(this.animate);
    if ((this.scene == null) || this.scene.isPaused()) {
      return;
    }
    this.stats.begin();
    this.scene.update(deltaTime);
    this.proton.update();
    this.renderer.render(this.scene);
    this.stats.end();
    TWEEN.update(deltaTime);
  };

  return BeerPoweredEngine;

})();

module.exports = BeerPoweredEngine;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlZXJwb3dlcmVkZW5naW5lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLHdCQUFBO0VBQUEsa0ZBQUE7O0FBQUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSLENBQVIsQ0FBQTs7QUFBQTtBQUdpQixFQUFBLDJCQUFFLEtBQUYsRUFBVSxNQUFWLEdBQUE7QUFDVCxJQURVLElBQUMsQ0FBQSxRQUFBLEtBQ1gsQ0FBQTtBQUFBLElBRGtCLElBQUMsQ0FBQSxTQUFBLE1BQ25CLENBQUE7QUFBQSw2Q0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsTUFBRCxHQUFVLEVBQVYsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQURULENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxJQUFELENBQUEsQ0FGQSxDQUFBO0FBQUEsSUFJQSxNQUFNLENBQUMsSUFBUCxHQUFjLElBSmQsQ0FEUztFQUFBLENBQWI7O0FBQUEsOEJBT0EsSUFBQSxHQUFNLFNBQUEsR0FBQTtBQUNGLFFBQUEsVUFBQTtBQUFBLElBQUEsQ0FBQSxHQUFJLElBQUosQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsSUFBQyxDQUFBLEtBQXpCLEVBQWdDLElBQUMsQ0FBQSxNQUFqQyxDQUZaLENBQUE7QUFBQSxJQUdBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixJQUFDLENBQUEsUUFBUSxDQUFDLElBQXBDLENBSEEsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxjQUFWLEdBQTJCLFNBQUEsR0FBQSxDQUwzQixDQUFBO0FBQUEsSUFPQSxJQUFDLENBQUEsUUFBUSxDQUFDLGlCQUFWLEdBQThCLFNBQUMsUUFBRCxHQUFBO0FBQzFCLFVBQUEsY0FBQTtBQUFBLE1BQUEsY0FBQSxHQUFxQixJQUFBLElBQUksQ0FBQyxNQUFMLENBQVksUUFBUSxDQUFDLE1BQXJCLENBQXJCLENBQUE7QUFBQSxNQUNBLFFBQVEsQ0FBQyxNQUFULEdBQWtCLGNBRGxCLENBQUE7QUFBQSxNQUVBLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUixDQUFpQixRQUFRLENBQUMsTUFBMUIsQ0FGQSxDQUQwQjtJQUFBLENBUDlCLENBQUE7QUFBQSxJQVlBLElBQUMsQ0FBQSxRQUFRLENBQUMsZ0JBQVYsR0FBNkIsU0FBQyxRQUFELEdBQUE7QUFDekIsTUFBQSxlQUFBLENBQWdCLFFBQVEsQ0FBQyxNQUF6QixFQUFpQyxRQUFqQyxDQUFBLENBRHlCO0lBQUEsQ0FaN0IsQ0FBQTtBQUFBLElBZUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxjQUFWLEdBQTJCLFNBQUMsUUFBRCxHQUFBO0FBQ3ZCLE1BQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFSLENBQW9CLFFBQVEsQ0FBQyxNQUE3QixDQUFBLENBRHVCO0lBQUEsQ0FmM0IsQ0FBQTtBQUFBLElBbUJBLElBQUMsQ0FBQSxLQUFELEdBQVMsR0FBQSxDQUFBLEtBbkJULENBQUE7QUFBQSxJQW9CQSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQWQsQ0FBMEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFqQyxDQXBCQSxDQUFBO0FBQUEsSUFzQkEsT0FBQSxHQUFjLElBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFiLENBQXVCLDBCQUF2QixDQXRCZCxDQUFBO0FBQUEsSUF3QkEsSUFBQyxDQUFBLE1BQUQsR0FBVSxHQUFBLENBQUEsTUF4QlYsQ0FBQTtBQUFBLElBeUJBLElBQUMsQ0FBQSxPQUFELEdBQVcsR0FBQSxDQUFBLE1BQVUsQ0FBQyxnQkF6QnRCLENBQUE7QUFBQSxJQTBCQSxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVQsR0FBb0IsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFnQixJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksRUFBWixFQUFnQixFQUFoQixDQUFoQixFQUNaLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxFQUFaLEVBQWdCLEVBQWhCLENBRFksQ0ExQnBCLENBQUE7QUFBQSxJQTRCQSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQVQsQ0FBMkIsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLENBQVosQ0FBM0IsQ0E1QkEsQ0FBQTtBQUFBLElBNkJBLElBQUMsQ0FBQSxPQUFPLENBQUMsYUFBVCxDQUEyQixJQUFBLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE9BQW5CLENBQTNCLENBN0JBLENBQUE7QUFBQSxJQThCQSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQVQsQ0FBMkIsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLENBQVosRUFBZSxDQUFmLENBQTNCLENBOUJBLENBQUE7QUFBQSxJQStCQSxJQUFDLENBQUEsT0FBTyxDQUFDLGFBQVQsQ0FBMkIsSUFBQSxNQUFNLENBQUMsUUFBUCxDQUFvQixJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBcEIsRUFDbkIsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLENBQVosRUFBZSxFQUFmLEVBQW1CLElBQW5CLENBRG1CLEVBQ08sT0FEUCxDQUEzQixDQS9CQSxDQUFBO0FBQUEsSUFpQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxZQUFULENBQTBCLElBQUEsTUFBTSxDQUFDLE9BQVAsQ0FBZSxDQUFmLENBQTFCLENBakNBLENBQUE7QUFBQSxJQWtDQSxJQUFDLENBQUEsT0FBTyxDQUFDLFlBQVQsQ0FBMEIsSUFBQSxNQUFNLENBQUMsS0FBUCxDQUFpQixJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBakIsRUFBb0MsRUFBcEMsQ0FBMUIsQ0FsQ0EsQ0FBQTtBQUFBLElBbUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsWUFBVCxDQUEwQixJQUFBLE1BQU0sQ0FBQyxLQUFQLENBQWEsQ0FBYixFQUFnQixFQUFoQixDQUExQixDQW5DQSxDQUFBO0FBQUEsSUFvQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxZQUFULENBQTBCLElBQUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxDQUFkLEVBQWlCLE1BQU0sQ0FBQyxPQUFQLENBQWUsQ0FBQSxDQUFmLEVBQW1CLENBQW5CLENBQWpCLEVBQXdDLEtBQXhDLENBQTFCLENBcENBLENBQUE7QUFBQSxJQXFDQSxJQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFYLEdBQWUsSUFBQSxHQUFPLENBckN0QixDQUFBO0FBQUEsSUFzQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBWCxHQUFlLEdBdENmLENBQUE7QUFBQSxJQXVDQSxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVQsQ0FBQSxDQXZDQSxDQUFBO0FBQUEsSUF3Q0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFSLENBQW1CLElBQUMsQ0FBQSxPQUFwQixDQXhDQSxDQUFBO0FBQUEsSUEwQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxnQkFBVCxDQUE4QixJQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUsQ0FBZixDQUE5QixDQTFDQSxDQUFBO0FBQUEsSUEyQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxnQkFBVCxDQUE4QixJQUFBLE1BQU0sQ0FBQyxXQUFQLENBQW1CLEVBQW5CLEVBQXVCLEVBQXZCLEVBQTJCLEVBQTNCLENBQTlCLENBM0NBLENBQUE7QUFBQSxJQTRDQSxJQUFDLENBQUEsT0FBTyxDQUFDLGdCQUFULENBQThCLElBQUEsTUFBTSxDQUFDLFNBQVAsQ0FBcUIsSUFBQSxNQUFNLENBQUMsUUFBUCxDQUFnQixFQUFoQixFQUFvQixDQUFwQixFQUF1QixHQUF2QixFQUE0QixHQUE1QixDQUFyQixFQUF1RCxPQUF2RCxDQUE5QixDQTVDQSxDQUFBO0FBQUEsSUE2Q0EscUJBQUEsQ0FBc0IsSUFBQyxDQUFBLE9BQXZCLENBN0NBLENBREU7RUFBQSxDQVBOLENBQUE7O0FBQUEsOEJBd0RBLFdBQUEsR0FBYSxTQUFDLEVBQUQsRUFBSyxNQUFMLEVBQWEsUUFBYixHQUFBO0FBQ1QsUUFBQSxLQUFBOztNQUFBLFNBQVU7S0FBVjs7TUFDQSxXQUFZLFNBQUEsR0FBQTtLQURaO0FBR0EsSUFBQSxJQUFzQixJQUFDLENBQUEsTUFBTyxDQUFBLEVBQUEsQ0FBOUI7QUFBQSxhQUFPLFNBQVAsQ0FBQTtLQUhBO0FBQUEsSUFLQSxLQUFBLEdBQVEsR0FBQSxDQUFBLE1BTFIsQ0FBQTtBQUFBLElBTUEsS0FBSyxDQUFDLElBQU4sQ0FBQSxDQU5BLENBQUE7QUFBQSxJQU9BLEtBQUssQ0FBQyxRQUFOLENBQWUsUUFBZixDQVBBLENBQUE7QUFBQSxJQVFBLElBQUMsQ0FBQSxNQUFPLENBQUEsRUFBQSxDQUFSLEdBQWMsS0FSZCxDQUFBO1dBU0EsTUFWUztFQUFBLENBeERiLENBQUE7O0FBQUEsOEJBb0VBLFNBQUEsR0FBVyxTQUFDLEVBQUQsR0FBQTtBQUNQLFFBQUEsSUFBQTtBQUFBLElBQUEsSUFBRyx1QkFBSDs7WUFDVSxDQUFFLEtBQVIsQ0FBQTtPQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUMsQ0FBQSxNQUFPLENBQUEsRUFBQSxDQURqQixDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQSxDQUZBLENBQUE7QUFHQSxhQUFPLElBQVAsQ0FKSjtLQUFBO1dBS0EsTUFOTztFQUFBLENBcEVYLENBQUE7O0FBQUEsOEJBNEVBLGVBQUEsR0FBaUIsU0FBQyxjQUFELEVBQWlCLFFBQWpCLEdBQUE7QUFDYixJQUFBLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBeEIsR0FBNEIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUF2QyxDQUFBO0FBQUEsSUFDQSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQXhCLEdBQTRCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FEdkMsQ0FBQTtBQUFBLElBRUEsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFyQixHQUF5QixRQUFRLENBQUMsS0FGbEMsQ0FBQTtBQUFBLElBR0EsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFyQixHQUF5QixRQUFRLENBQUMsS0FIbEMsQ0FBQTtBQUFBLElBSUEsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUF0QixHQUEwQixFQUoxQixDQUFBO0FBQUEsSUFLQSxjQUFjLENBQUMsTUFBTSxDQUFDLENBQXRCLEdBQTBCLEVBTDFCLENBQUE7QUFBQSxJQU1BLGNBQWMsQ0FBQyxLQUFmLEdBQXVCLFFBQVEsQ0FBQyxLQU5oQyxDQUFBO1dBT0EsY0FBYyxDQUFDLFFBQWYsR0FBMEIsUUFBUSxDQUFDLFFBQVQsR0FBb0IsSUFBSSxDQUFDLEVBQXpCLEdBQThCLElBUjNDO0VBQUEsQ0E1RWpCLENBQUE7O0FBQUEsOEJBc0ZBLE9BQUEsR0FBUyxTQUFDLFNBQUQsR0FBQTtBQUNMLElBQUEscUJBQUEsQ0FBc0IsSUFBQyxDQUFBLE9BQXZCLENBQUEsQ0FBQTtBQUVBLElBQUEsSUFBYyxvQkFBSixJQUFlLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxDQUFBLENBQXpCO0FBQUEsWUFBQSxDQUFBO0tBRkE7QUFBQSxJQUlBLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxDQUFBLENBSkEsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLENBQWMsU0FBZCxDQUxBLENBQUE7QUFBQSxJQU1BLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixDQUFBLENBTkEsQ0FBQTtBQUFBLElBT0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLENBQWlCLElBQUMsQ0FBQSxLQUFsQixDQVBBLENBQUE7QUFBQSxJQVFBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFBLENBUkEsQ0FBQTtBQUFBLElBVUEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxTQUFiLENBVkEsQ0FESztFQUFBLENBdEZULENBQUE7OzJCQUFBOztJQUhKLENBQUE7O0FBQUEsTUF1R00sQ0FBQyxPQUFQLEdBQWlCLGlCQXZHakIsQ0FBQSIsImZpbGUiOiJiZWVycG93ZXJlZGVuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlNjZW5lID0gcmVxdWlyZSAnU2NlbmUnXG5cbmNsYXNzIEJlZXJQb3dlcmVkRW5naW5lXG4gICAgY29uc3RydWN0b3I6IChAd2lkdGgsIEBoZWlnaHQpIC0+XG4gICAgICAgIEBzY2VuZXMgPSB7fVxuICAgICAgICBAc2NlbmUgPSBudWxsXG4gICAgICAgIEBpbml0KClcblxuICAgICAgICB3aW5kb3cuYmVlciA9IEBcblxuICAgIGluaXQ6IC0+XG4gICAgICAgICQgPSBAXG5cbiAgICAgICAgQHJlbmRlcmVyID0gUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIgQHdpZHRoLCBAaGVpZ2h0XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgQHJlbmRlcmVyLnZpZXdcblxuICAgICAgICBAcmVuZGVyZXIub25Qcm90b25VcGRhdGUgPSAtPlxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEByZW5kZXJlci5vblBhcnRpY2xlQ3JlYXRlZCA9IChwYXJ0aWNsZSkgLT5cbiAgICAgICAgICAgIHBhcnRpY2xlU3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlIHBhcnRpY2xlLnRhcmdldFxuICAgICAgICAgICAgcGFydGljbGUuc3ByaXRlID0gcGFydGljbGVTcHJpdGVcbiAgICAgICAgICAgICQuc2NlbmUuYWRkQ2hpbGQgcGFydGljbGUuc3ByaXRlXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQHJlbmRlcmVyLm9uUGFydGljbGVVcGRhdGUgPSAocGFydGljbGUpIC0+XG4gICAgICAgICAgICB0cmFuc2Zvcm1TcHJpdGUgcGFydGljbGUuc3ByaXRlLCBwYXJ0aWNsZVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEByZW5kZXJlci5vblBhcnRpY2xlRGVhZCA9IChwYXJ0aWNsZSkgLT5cbiAgICAgICAgICAgICQuc2NlbmUucmVtb3ZlQ2hpbGQgcGFydGljbGUuc3ByaXRlXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAc3RhdHMgPSBuZXcgU3RhdHNcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAc3RhdHMuZG9tRWxlbWVudFxuXG4gICAgICAgIHRleHR1cmUgPSBuZXcgUElYSS5UZXh0dXJlLmZyb21JbWFnZSAnL2Fzc2V0cy9pbWFnZXMvYnVubnkucG5nJ1xuXG4gICAgICAgIEBwcm90b24gPSBuZXcgUHJvdG9uXG4gICAgICAgIEBlbWl0dGVyID0gbmV3IFByb3Rvbi5CZWhhdmlvdXJFbWl0dGVyXG4gICAgICAgIEBlbWl0dGVyLnJhdGUgPSBuZXcgUHJvdG9uLlJhdGUgbmV3IFByb3Rvbi5TcGFuKDE1LCAxMyksXG4gICAgICAgICAgICBuZXcgUHJvdG9uLlNwYW4oLjIsIC41KVxuICAgICAgICBAZW1pdHRlci5hZGRJbml0aWFsaXplIG5ldyBQcm90b24uTWFzcyAxXG4gICAgICAgIEBlbWl0dGVyLmFkZEluaXRpYWxpemUgbmV3IFByb3Rvbi5JbWFnZVRhcmdldCB0ZXh0dXJlXG4gICAgICAgIEBlbWl0dGVyLmFkZEluaXRpYWxpemUgbmV3IFByb3Rvbi5MaWZlIDIsIDNcbiAgICAgICAgQGVtaXR0ZXIuYWRkSW5pdGlhbGl6ZSBuZXcgUHJvdG9uLlZlbG9jaXR5IG5ldyBQcm90b24uU3BhbigzLCA5KSxcbiAgICAgICAgICAgIG5ldyBQcm90b24uU3BhbigwLCAzMCwgdHJ1ZSksICdwb2xhcidcbiAgICAgICAgQGVtaXR0ZXIuYWRkQmVoYXZpb3VyIG5ldyBQcm90b24uR3Jhdml0eSA4XG4gICAgICAgIEBlbWl0dGVyLmFkZEJlaGF2aW91ciBuZXcgUHJvdG9uLlNjYWxlIG5ldyBQcm90b24uU3BhbigxLCAzKSwgLjNcbiAgICAgICAgQGVtaXR0ZXIuYWRkQmVoYXZpb3VyIG5ldyBQcm90b24uQWxwaGEgMSwgLjVcbiAgICAgICAgQGVtaXR0ZXIuYWRkQmVoYXZpb3VyIG5ldyBQcm90b24uUm90YXRlIDAsIFByb3Rvbi5nZXRTcGFuKC04LCA5KSwgJ2FkZCdcbiAgICAgICAgQGVtaXR0ZXIucC54ID0gMTAwMyAvIDJcbiAgICAgICAgQGVtaXR0ZXIucC55ID0gMTAwXG4gICAgICAgIEBlbWl0dGVyLmVtaXQoKVxuICAgICAgICBAcHJvdG9uLmFkZEVtaXR0ZXIgQGVtaXR0ZXJcblxuICAgICAgICBAZW1pdHRlci5hZGRTZWxmQmVoYXZpb3VyIG5ldyBQcm90b24uR3Jhdml0eSA1XG4gICAgICAgIEBlbWl0dGVyLmFkZFNlbGZCZWhhdmlvdXIgbmV3IFByb3Rvbi5SYW5kb21EcmlmdCAzMCwgMzAsIC4xXG4gICAgICAgIEBlbWl0dGVyLmFkZFNlbGZCZWhhdmlvdXIgbmV3IFByb3Rvbi5Dcm9zc1pvbmUgbmV3IFByb3Rvbi5SZWN0Wm9uZSg1MCwgMCwgOTM2LCA2MTApLCAnYm91bmQnXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0ZVxuICAgICAgICByZXR1cm5cblxuICAgIGNyZWF0ZVNjZW5lOiAoaWQsIHRzY2VuZSwgY2FsbGJhY2spIC0+XG4gICAgICAgIHRzY2VuZSA/PSBTY2VuZVxuICAgICAgICBjYWxsYmFjayA/PSAtPlxuXG4gICAgICAgIHJldHVybiBgdW5kZWZpbmVkYCBpZiBAc2NlbmVzW2lkXVxuXG4gICAgICAgIHNjZW5lID0gbmV3IHRzY2VuZVxuICAgICAgICBzY2VuZS5pbml0KClcbiAgICAgICAgc2NlbmUub25VcGRhdGUgY2FsbGJhY2tcbiAgICAgICAgQHNjZW5lc1tpZF0gPSBzY2VuZVxuICAgICAgICBzY2VuZVxuXG4gICAgZ29Ub1NjZW5lOiAoaWQpIC0+XG4gICAgICAgIGlmIEBzY2VuZXNbaWRdP1xuICAgICAgICAgICAgQHNjZW5lPy5wYXVzZSgpXG4gICAgICAgICAgICBAc2NlbmUgPSBAc2NlbmVzW2lkXVxuICAgICAgICAgICAgQHNjZW5lLnJlc3VtZSgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBmYWxzZVxuXG4gICAgdHJhbnNmb3JtU3ByaXRlOiAocGFydGljbGVTcHJpdGUsIHBhcnRpY2xlKSAtPlxuICAgICAgICBwYXJ0aWNsZVNwcml0ZS5wb3NpdGlvbi54ID0gcGFydGljbGUucC54XG4gICAgICAgIHBhcnRpY2xlU3ByaXRlLnBvc2l0aW9uLnkgPSBwYXJ0aWNsZS5wLnlcbiAgICAgICAgcGFydGljbGVTcHJpdGUuc2NhbGUueCA9IHBhcnRpY2xlLnNjYWxlXG4gICAgICAgIHBhcnRpY2xlU3ByaXRlLnNjYWxlLnkgPSBwYXJ0aWNsZS5zY2FsZVxuICAgICAgICBwYXJ0aWNsZVNwcml0ZS5hbmNob3IueCA9IC41XG4gICAgICAgIHBhcnRpY2xlU3ByaXRlLmFuY2hvci55ID0gLjVcbiAgICAgICAgcGFydGljbGVTcHJpdGUuYWxwaGEgPSBwYXJ0aWNsZS5hbHBoYVxuICAgICAgICBwYXJ0aWNsZVNwcml0ZS5yb3RhdGlvbiA9IHBhcnRpY2xlLnJvdGF0aW9uICogTWF0aC5QSSAvIDE4MFxuXG4gICAgYW5pbWF0ZTogKGRlbHRhVGltZSkgPT5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG5cbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAc2NlbmU/IG9yIEBzY2VuZS5pc1BhdXNlZCgpXG5cbiAgICAgICAgQHN0YXRzLmJlZ2luKClcbiAgICAgICAgQHNjZW5lLnVwZGF0ZSBkZWx0YVRpbWVcbiAgICAgICAgQHByb3Rvbi51cGRhdGUoKVxuICAgICAgICBAcmVuZGVyZXIucmVuZGVyIEBzY2VuZVxuICAgICAgICBAc3RhdHMuZW5kKClcblxuICAgICAgICBUV0VFTi51cGRhdGUgZGVsdGFUaW1lXG4gICAgICAgIHJldHVyblxuXG5tb2R1bGUuZXhwb3J0cyA9IEJlZXJQb3dlcmVkRW5naW5lXG4iXX0=
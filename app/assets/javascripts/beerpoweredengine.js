var BeerPoweredEngine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BeerPoweredEngine = (function() {
  var _scene, _scenes;

  _scenes = null;

  _scene = null;

  function BeerPoweredEngine(width, height) {
    this.width = width;
    this.height = height;
    this.animate = __bind(this.animate, this);
    this.init();
  }

  BeerPoweredEngine.prototype.init = function() {
    this.renderer = PIXI.autoDetectRenderer(this.width, this.height);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    requestAnimationFrame(this.animate);
  };

  BeerPoweredEngine.prototype.createScene = function(id) {
    var scene;
    if (this._scenes[id]) {
      return undefined;
    }
    scene = new Scene;
    this._scenes[id] = scene;
    return scene;
  };

  BeerPoweredEngine.prototype.goToScene = function(id) {
    if (this._scenes[id]) {
      if (this._scene.scene) {
        this._scene.paused();
      }
      this._scene = this._scenes[id];
      this._scene.resume();
      return true;
    }
    return false;
  };

  BeerPoweredEngine.prototype.setScene = function(scene) {
    this._scene = scene;
  };

  BeerPoweredEngine.prototype.setPoller = function(poller) {
    this._poller = poller;
  };

  BeerPoweredEngine.prototype.animate = function(deltaTime) {
    var _ref;
    this.stats.begin();
    if (this._scene != null) {
      this.renderer.render(this._scene);
    }
    if ((_ref = this._poller) != null) {
      _ref.call();
    }
    this.stats.end();
    requestAnimationFrame(this.animate);
    TWEEN.update(deltaTime);
  };

  return BeerPoweredEngine;

})();

module.exports = BeerPoweredEngine;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlZXJwb3dlcmVkZW5naW5lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBLGlCQUFBO0VBQUEsa0ZBQUE7O0FBQUE7QUFDSSxNQUFBLGVBQUE7O0FBQUEsRUFBQSxPQUFBLEdBQVUsSUFBVixDQUFBOztBQUFBLEVBQ0EsTUFBQSxHQUFTLElBRFQsQ0FBQTs7QUFFYSxFQUFBLDJCQUFFLEtBQUYsRUFBVSxNQUFWLEdBQUE7QUFDVCxJQURVLElBQUMsQ0FBQSxRQUFBLEtBQ1gsQ0FBQTtBQUFBLElBRGtCLElBQUMsQ0FBQSxTQUFBLE1BQ25CLENBQUE7QUFBQSw2Q0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsSUFBRCxDQUFBLENBQUEsQ0FEUztFQUFBLENBRmI7O0FBQUEsOEJBS0EsSUFBQSxHQUFNLFNBQUEsR0FBQTtBQUNGLElBQUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsSUFBQyxDQUFBLEtBQXpCLEVBQWdDLElBQUMsQ0FBQSxNQUFqQyxDQUFaLENBQUE7QUFBQSxJQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixJQUFDLENBQUEsUUFBUSxDQUFDLElBQXBDLENBREEsQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxHQUFBLENBQUEsS0FIVCxDQUFBO0FBQUEsSUFJQSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQWQsQ0FBMEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFqQyxDQUpBLENBQUE7QUFBQSxJQU1BLHFCQUFBLENBQXNCLElBQUMsQ0FBQSxPQUF2QixDQU5BLENBREU7RUFBQSxDQUxOLENBQUE7O0FBQUEsOEJBZUEsV0FBQSxHQUFhLFNBQUMsRUFBRCxHQUFBO0FBQ1QsUUFBQSxLQUFBO0FBQUEsSUFBQSxJQUFzQixJQUFDLENBQUEsT0FBUSxDQUFBLEVBQUEsQ0FBL0I7QUFBQSxhQUFPLFNBQVAsQ0FBQTtLQUFBO0FBQUEsSUFFQSxLQUFBLEdBQVEsR0FBQSxDQUFBLEtBRlIsQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLE9BQVEsQ0FBQSxFQUFBLENBQVQsR0FBZSxLQUhmLENBQUE7V0FJQSxNQUxTO0VBQUEsQ0FmYixDQUFBOztBQUFBLDhCQXNCQSxTQUFBLEdBQVcsU0FBQyxFQUFELEdBQUE7QUFDUCxJQUFBLElBQUcsSUFBQyxDQUFBLE9BQVEsQ0FBQSxFQUFBLENBQVo7QUFDSSxNQUFBLElBQW9CLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBNUI7QUFBQSxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixDQUFBLENBQUEsQ0FBQTtPQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxPQUFRLENBQUEsRUFBQSxDQURuQixDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsQ0FBQSxDQUZBLENBQUE7QUFHQSxhQUFPLElBQVAsQ0FKSjtLQUFBO1dBS0EsTUFOTztFQUFBLENBdEJYLENBQUE7O0FBQUEsOEJBOEJBLFFBQUEsR0FBVSxTQUFDLEtBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLE1BQUQsR0FBVSxLQUFWLENBRE07RUFBQSxDQTlCVixDQUFBOztBQUFBLDhCQWtDQSxTQUFBLEdBQVcsU0FBQyxNQUFELEdBQUE7QUFDUCxJQUFBLElBQUMsQ0FBQSxPQUFELEdBQVcsTUFBWCxDQURPO0VBQUEsQ0FsQ1gsQ0FBQTs7QUFBQSw4QkFzQ0EsT0FBQSxHQUFTLFNBQUMsU0FBRCxHQUFBO0FBQ0wsUUFBQSxJQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLElBQUcsbUJBQUg7QUFDSSxNQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFpQixJQUFDLENBQUEsTUFBbEIsQ0FBQSxDQURKO0tBREE7O1VBSVEsQ0FBRSxJQUFWLENBQUE7S0FKQTtBQUFBLElBS0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQUEsQ0FMQSxDQUFBO0FBQUEsSUFPQSxxQkFBQSxDQUFzQixJQUFDLENBQUEsT0FBdkIsQ0FQQSxDQUFBO0FBQUEsSUFRQSxLQUFLLENBQUMsTUFBTixDQUFhLFNBQWIsQ0FSQSxDQURLO0VBQUEsQ0F0Q1QsQ0FBQTs7MkJBQUE7O0lBREosQ0FBQTs7QUFBQSxNQW9ETSxDQUFDLE9BQVAsR0FBaUIsaUJBcERqQixDQUFBIiwiZmlsZSI6ImJlZXJwb3dlcmVkZW5naW5lLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG5jbGFzcyBCZWVyUG93ZXJlZEVuZ2luZVxuICAgIF9zY2VuZXMgPSBudWxsXG4gICAgX3NjZW5lID0gbnVsbFxuICAgIGNvbnN0cnVjdG9yOiAoQHdpZHRoLCBAaGVpZ2h0KSAtPlxuICAgICAgICBAaW5pdCgpXG5cbiAgICBpbml0OiAtPlxuICAgICAgICBAcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlciBAd2lkdGgsIEBoZWlnaHRcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAcmVuZGVyZXIudmlld1xuXG4gICAgICAgIEBzdGF0cyA9IG5ldyBTdGF0c1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIEBzdGF0cy5kb21FbGVtZW50XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG4gICAgICAgIHJldHVyblxuXG4gICAgY3JlYXRlU2NlbmU6IChpZCkgLT5cbiAgICAgICAgcmV0dXJuIGB1bmRlZmluZWRgIGlmIEBfc2NlbmVzW2lkXVxuXG4gICAgICAgIHNjZW5lID0gbmV3IFNjZW5lO1xuICAgICAgICBAX3NjZW5lc1tpZF0gPSBzY2VuZVxuICAgICAgICBzY2VuZVxuXG4gICAgZ29Ub1NjZW5lOiAoaWQpIC0+XG4gICAgICAgIGlmIEBfc2NlbmVzW2lkXVxuICAgICAgICAgICAgQF9zY2VuZS5wYXVzZWQoKSBpZiBAX3NjZW5lLnNjZW5lXG4gICAgICAgICAgICBAX3NjZW5lID0gQF9zY2VuZXNbaWRdXG4gICAgICAgICAgICBAX3NjZW5lLnJlc3VtZSgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBmYWxzZVxuXG4gICAgc2V0U2NlbmU6IChzY2VuZSkgLT5cbiAgICAgICAgQF9zY2VuZSA9IHNjZW5lXG4gICAgICAgIHJldHVyblxuXG4gICAgc2V0UG9sbGVyOiAocG9sbGVyKSAtPlxuICAgICAgICBAX3BvbGxlciA9IHBvbGxlclxuICAgICAgICByZXR1cm5cblxuICAgIGFuaW1hdGU6IChkZWx0YVRpbWUpID0+XG4gICAgICAgIEBzdGF0cy5iZWdpbigpXG4gICAgICAgIGlmIEBfc2NlbmU/XG4gICAgICAgICAgICBAcmVuZGVyZXIucmVuZGVyIEBfc2NlbmVcblxuICAgICAgICBAX3BvbGxlcj8uY2FsbCgpXG4gICAgICAgIEBzdGF0cy5lbmQoKVxuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0ZVxuICAgICAgICBUV0VFTi51cGRhdGUgZGVsdGFUaW1lXG4gICAgICAgIHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQmVlclBvd2VyZWRFbmdpbmVcbiJdfQ==
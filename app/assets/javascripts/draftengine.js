var DraftEngine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DraftEngine = (function() {
  function DraftEngine(screenWidth, screenHeight) {
    this.screenWidth = screenWidth;
    this.screenHeight = screenHeight;
    this.animate = __bind(this.animate, this);
    this.init();
  }

  DraftEngine.prototype.init = function() {
    var canvas, context, drawLine;
    this.renderer = PIXI.autoDetectRenderer(this.screenWidth, this.screenHeight);
    document.body.appendChild(this.renderer.view);
    this.stats = new Stats;
    document.body.appendChild(this.stats.domElement);
    this.stage = new PIXI.Stage(0x00ff00);
    canvas = document.createElement('canvas');
    canvas.width = this.screenWidth;
    canvas.height = this.screenHeight;
    context = canvas.getContext('2d');
    drawLine = function(fX, fY, tX, tY, width, color) {
      context.beginPath();
      context.moveTo(fX, fY);
      context.lineTo(tX, tY);
      context.lineWidth = width;
      context.strokeStyle = color;
      return context.stroke();
    };
    drawLine(57, 0, 57, 450, 114, '#808080');
    drawLine(171, 0, 171, 450, 114, '#ffff00');
    drawLine(285, 0, 285, 450, 114, '#00ffff');
    drawLine(399, 0, 399, 450, 114, '#00ff00');
    drawLine(513, 0, 513, 450, 114, '#ff00ff');
    drawLine(627, 0, 627, 450, 114, '#ff0000');
    drawLine(741, 0, 741, 450, 114, '#0000ff');
    drawLine(100, 450, 100, 500, 200, '#0000ff');
    drawLine(300, 450, 300, 500, 200, '#ff00ff');
    drawLine(500, 450, 500, 500, 200, '#00ffff');
    drawLine(700, 450, 700, 500, 200, '#ffffff');
    drawLine(200, 500, 200, 600, 400, '#ffffff');
    drawLine(600, 500, 600, 600, 400, '#000000');
    this.sprite = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas));
    this.stage.addChild(this.sprite);
    window.renderer = this.renderer;
    window.animate = this.animate;
    window.stats = this.stats;
    window.stage = this.stage;
    requestAnimationFrame(this.animate);
  };

  DraftEngine.prototype.setStage = function(stage) {
    this.stage = stage;
    return window.stage = this.stage;
  };

  DraftEngine.prototype.animate = function() {
    this.stats.begin();
    if (this.stage != null) {
      this.renderer.render(this.stage);
    }
    this.stats.end();
    requestAnimationFrame(this.animate);
  };

  return DraftEngine;

})();

module.exports = DraftEngine;

//# sourceMappingURL=data:application/json;base64,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QTtBQUFBLElBd0NBLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLElBQUMsQ0FBQSxRQXhDbkIsQ0FBQTtBQUFBLElBeUNBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLElBQUMsQ0FBQSxPQXpDbEIsQ0FBQTtBQUFBLElBMENBLE1BQU0sQ0FBQyxLQUFQLEdBQWUsSUFBQyxDQUFBLEtBMUNoQixDQUFBO0FBQUEsSUEyQ0EsTUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFDLENBQUEsS0EzQ2hCLENBQUE7QUFBQSxJQTZDQSxxQkFBQSxDQUFzQixJQUFDLENBQUEsT0FBdkIsQ0E3Q0EsQ0FERTtFQUFBLENBSE4sQ0FBQTs7QUFBQSx3QkFvREEsUUFBQSxHQUFVLFNBQUMsS0FBRCxHQUFBO0FBQ04sSUFBQSxJQUFDLENBQUEsS0FBRCxHQUFTLEtBQVQsQ0FBQTtXQUNBLE1BQU0sQ0FBQyxLQUFQLEdBQWUsSUFBQyxDQUFBLE1BRlY7RUFBQSxDQXBEVixDQUFBOztBQUFBLHdCQXdEQSxPQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ0wsSUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBQSxDQUFBLENBQUE7QUFFQSxJQUFBLElBQUcsa0JBQUg7QUFDSSxNQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFpQixJQUFDLENBQUEsS0FBbEIsQ0FBQSxDQURKO0tBRkE7QUFBQSxJQUtBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFBLENBTEEsQ0FBQTtBQUFBLElBT0EscUJBQUEsQ0FBc0IsSUFBQyxDQUFBLE9BQXZCLENBUEEsQ0FESztFQUFBLENBeERULENBQUE7O3FCQUFBOztJQURKLENBQUE7O0FBQUEsTUFxRU0sQ0FBQyxPQUFQLEdBQWlCLFdBckVqQixDQUFBIiwiZmlsZSI6ImRyYWZ0ZW5naW5lLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG5jbGFzcyBEcmFmdEVuZ2luZVxuICAgIGNvbnN0cnVjdG9yOiAoQHNjcmVlbldpZHRoLCBAc2NyZWVuSGVpZ2h0KSAtPlxuICAgICAgICBAaW5pdCgpXG5cbiAgICBpbml0OiAtPlxuICAgICAgICBAcmVuZGVyZXIgPSBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlciBAc2NyZWVuV2lkdGgsIEBzY3JlZW5IZWlnaHRcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAcmVuZGVyZXIudmlld1xuXG4gICAgICAgIEBzdGF0cyA9IG5ldyBTdGF0c1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIEBzdGF0cy5kb21FbGVtZW50XG5cbiAgICAgICAgQHN0YWdlID0gbmV3IFBJWEkuU3RhZ2UgMHgwMGZmMDBcblxuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdjYW52YXMnXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IEBzY3JlZW5XaWR0aFxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gQHNjcmVlbkhlaWdodFxuXG4gICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCAnMmQnXG4gICAgICAgIGRyYXdMaW5lID0gKGZYLCBmWSwgdFgsIHRZLCB3aWR0aCwgY29sb3IpIC0+XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyBmWCwgZllcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvIHRYLCB0WVxuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB3aWR0aFxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpXG5cbiAgICAgICAgZHJhd0xpbmUgIDU3LCAwLCAgNTcsIDQ1MCwgMTE0LCAnIzgwODA4MCdcbiAgICAgICAgZHJhd0xpbmUgMTcxLCAwLCAxNzEsIDQ1MCwgMTE0LCAnI2ZmZmYwMCdcbiAgICAgICAgZHJhd0xpbmUgMjg1LCAwLCAyODUsIDQ1MCwgMTE0LCAnIzAwZmZmZidcbiAgICAgICAgZHJhd0xpbmUgMzk5LCAwLCAzOTksIDQ1MCwgMTE0LCAnIzAwZmYwMCdcbiAgICAgICAgZHJhd0xpbmUgNTEzLCAwLCA1MTMsIDQ1MCwgMTE0LCAnI2ZmMDBmZidcbiAgICAgICAgZHJhd0xpbmUgNjI3LCAwLCA2MjcsIDQ1MCwgMTE0LCAnI2ZmMDAwMCdcbiAgICAgICAgZHJhd0xpbmUgNzQxLCAwLCA3NDEsIDQ1MCwgMTE0LCAnIzAwMDBmZidcblxuICAgICAgICBkcmF3TGluZSAxMDAsIDQ1MCwgMTAwLCA1MDAsIDIwMCwgJyMwMDAwZmYnXG4gICAgICAgIGRyYXdMaW5lIDMwMCwgNDUwLCAzMDAsIDUwMCwgMjAwLCAnI2ZmMDBmZidcbiAgICAgICAgZHJhd0xpbmUgNTAwLCA0NTAsIDUwMCwgNTAwLCAyMDAsICcjMDBmZmZmJ1xuICAgICAgICBkcmF3TGluZSA3MDAsIDQ1MCwgNzAwLCA1MDAsIDIwMCwgJyNmZmZmZmYnXG5cbiAgICAgICAgZHJhd0xpbmUgMjAwLCA1MDAsIDIwMCwgNjAwLCA0MDAsICcjZmZmZmZmJ1xuICAgICAgICBkcmF3TGluZSA2MDAsIDUwMCwgNjAwLCA2MDAsIDQwMCwgJyMwMDAwMDAnXG5cbiAgICAgICAgQHNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZSBQSVhJLlRleHR1cmUuZnJvbUNhbnZhcyBjYW52YXNcbiAgICAgICAgQHN0YWdlLmFkZENoaWxkIEBzcHJpdGVcblxuICAgICAgICB3aW5kb3cucmVuZGVyZXIgPSBAcmVuZGVyZXJcbiAgICAgICAgd2luZG93LmFuaW1hdGUgPSBAYW5pbWF0ZVxuICAgICAgICB3aW5kb3cuc3RhdHMgPSBAc3RhdHNcbiAgICAgICAgd2luZG93LnN0YWdlID0gQHN0YWdlXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG4gICAgICAgIHJldHVyblxuXG4gICAgc2V0U3RhZ2U6IChzdGFnZSkgLT5cbiAgICAgICAgQHN0YWdlID0gc3RhZ2VcbiAgICAgICAgd2luZG93LnN0YWdlID0gQHN0YWdlXG5cbiAgICBhbmltYXRlOiA9PlxuICAgICAgICBAc3RhdHMuYmVnaW4oKVxuXG4gICAgICAgIGlmIEBzdGFnZT9cbiAgICAgICAgICAgIEByZW5kZXJlci5yZW5kZXIgQHN0YWdlXG5cbiAgICAgICAgQHN0YXRzLmVuZCgpXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRlXG4gICAgICAgIHJldHVyblxuXG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFbmdpbmVcbiJdfQ==